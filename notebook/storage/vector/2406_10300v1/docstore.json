{"docstore/data": {"b2ad419e-1a65-4a86-93a2-1cbe537e4cda": {"__data__": {"id_": "b2ad419e-1a65-4a86-93a2-1cbe537e4cda", "embedding": null, "metadata": {"page_label": "1", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c509c0fc-5645-4ec2-ad52-c59cd9ab8312", "node_type": "4", "metadata": {"page_label": "1", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "d570161a434e7162e6b5c031d02cbe7c28252550a25e76af17bf561bbc3133d0", "class_name": "RelatedNodeInfo"}}, "text": "Large Language Models as Software Components:\nA Taxonomy for LLM-Integrated Applications\nIrene Weber\nKempten University of Applied Sciences, Germany\nirene.weber@hs-kempten.de\nAbstract\nLarge Language Models (LLMs) have become widely adopted recently. Research explores their use both\nas autonomous agents and as tools for software engineering. LLM-integrated applications, on the other\nhand, are software systems that leverage an LLM to perform tasks that would otherwise be impossible or\nrequiresignificantcodingeffort. WhileLLM-integratedapplicationengineeringisemergingasnewdiscipline,\nits terminology, concepts and methods need to be established. This study provides a taxonomy for LLM-\nintegratedapplications, offeringaframeworkforanalyzinganddescribingthesesystems. Italsodemonstrates\nvarious ways to utilize LLMs in applications, as well as options for implementing such integrations.\nFollowing established methods, we analyze a sample of recent LLM-integrated applications to identify rel-\nevant dimensions. We evaluate the taxonomy by applying it to additional cases. This review shows that\napplications integrate LLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term \u201cLLM components\u201d. To gain a clear understanding of an application\u2019s\narchitecture, we examine each LLM component separately. We identify thirteen dimensions along which to\ncharacterize an LLM component, including the LLM skills leveraged, the format of the output, and more.\nLLM-integrated applications are described as combinations of their LLM components. We suggest a concise\nrepresentation using feature vectors for visualization.\nThe taxonomy is effective for describing LLM-integrated applications. It can contribute to theory building in\nthe nascent field of LLM-integrated application engineering and aid in developing such systems. Researchers\nand practitioners explore numerous creative ways to leverage LLMs in applications. Though challenges\npersist, integrating LLMs may revolutionize the way software systems are built.\nKeywords: large language model, LLM-integrated, taxonomy, copilot, architecture, AI agent, LLM\ncomponent\n1. Introduction\nLarge Language Models (LLMs) have significantly\nimpacted various sectors of economy and society [47].\nDue to their proficiency in text understanding, cre-\native work, communication, knowledge work, and\ncode writing, they have been adopted in numerousfields, such as medicine, law, marketing, education,\nhuman resources, etc.\nPublic discussions often focus on the ethical aspects\nand societal consequences of these systems [36, 39].\nMeanwhile, research investigates Artificial General\nIntelligences and autonomous AI agents that can use\nservices, data sources, and other tools, and collabo-arXiv:2406.10300v1  [cs.SE]  13 Jun 2024", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2816, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f17c50c-986f-4c55-bd39-ea3cba752d89": {"__data__": {"id_": "3f17c50c-986f-4c55-bd39-ea3cba752d89", "embedding": null, "metadata": {"page_label": "2", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bbdd2ab-c07c-43f9-b8d1-3fdd6262449f", "node_type": "4", "metadata": {"page_label": "2", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "886cb1d50b78721d44bd1c026d0b68ab9fd8984cd086e0af992f47b2cb659719", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b3182b1-08a3-45c9-8f68-b0828413e2c1", "node_type": "1", "metadata": {}, "hash": "3f5506c487c998212843ac34e9b888e2b864a3c6b4d82e5d9c84d6bbd89426cd", "class_name": "RelatedNodeInfo"}}, "text": "rate to solve complex tasks [11, 62, 57, 21]. In addi-\ntion, LLMs offer many opportunities to enhance soft-\nware systems. They enable natural language interac-\ntion [59], automate complex tasks [19], and provide\nsupportive collaboration, as seen with recent LLM-\nbasedassistantproductsoftenbrandedas\u201ccopilots\u201d1.\nThis paper addresses the potential of LLMs for soft-\nware development by integrating their capabilities as\ncomponents into software systems. This contrasts\nwith current software engineering research, which\nviews LLMs as tools for software development rather\nthan as software components [14, 22], and with the\nconsiderable body of research examining LLMs as au-\ntonomous agents within multiagent systems [21].\nSoftware systems that invoke an LLM and process\nits output are referred to as \u201cLLM-integrated appli-\ncations\u201d, \u201cLLM-integrated systems\u201d, \u201cLLM-based ap-\nplications\u201d, etc. [32, 13, 57]. LLMs are versatile, mul-\ntipurpose tools capable of providing functionalities\nthat would otherwise be unfeasible or require sub-\nstantial development efforts [15, 24]. By significantly\nexpediting system development, they have the poten-\ntial to revolutionize not only the way users interact\nwith technology, but also the fundamental processes\nof software development.\nLLM-integrated applications engineering is emerging\nas a research field. E.g., [10] proposes LLM Sys-\ntemsEngineering(LLM-SE)asanoveldiscipline,and\n[44, 8, 7] discuss experiences and challenges that de-\nvelopers of such systems encounter in practice.\nThis study develops a taxonomy that provides a\nstructured framework for categorizing and analyzing\nLLM-integrated applications across various domains.\nTo develop and evaluate the taxonomy, we collected\na sample of LLM-integrated applications, concentrat-\ning on technical and industrial domains. These ap-\nplications showcase a broad range of opportunities\nto leverage LLMs, often integrating LLMs in mul-\ntiple ways for distinct purposes. In developing the\ntaxonomy, we found that examining each of these in-\ntegrations, termed \u201cLLM components\u201d, separately is\n1E.g., https://docs.github.com/en/copilot ,\nhttps://copilot.cloud.microsoft/en-us/copilot-excel ,\nhttps://www.salesforce.com/einsteincopilotcrucial for a clear understanding of an application\u2019s\narchitecture.\nThe taxonomy adopts an original architectural per-\nspective, focusing on how the application interacts\nwith the LLM while abstracting from the specifics\nof application domains.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2469, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b3182b1-08a3-45c9-8f68-b0828413e2c1": {"__data__": {"id_": "0b3182b1-08a3-45c9-8f68-b0828413e2c1", "embedding": null, "metadata": {"page_label": "2", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6bbdd2ab-c07c-43f9-b8d1-3fdd6262449f", "node_type": "4", "metadata": {"page_label": "2", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "886cb1d50b78721d44bd1c026d0b68ab9fd8984cd086e0af992f47b2cb659719", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f17c50c-986f-4c55-bd39-ea3cba752d89", "node_type": "1", "metadata": {"page_label": "2", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "449bad2230de28c8b8fdb23696e6a0265888118e46070b4233fc5e8c8fbf6664", "class_name": "RelatedNodeInfo"}}, "text": "To develop and evaluate the taxonomy, we collected\na sample of LLM-integrated applications, concentrat-\ning on technical and industrial domains. These ap-\nplications showcase a broad range of opportunities\nto leverage LLMs, often integrating LLMs in mul-\ntiple ways for distinct purposes. In developing the\ntaxonomy, we found that examining each of these in-\ntegrations, termed \u201cLLM components\u201d, separately is\n1E.g., https://docs.github.com/en/copilot ,\nhttps://copilot.cloud.microsoft/en-us/copilot-excel ,\nhttps://www.salesforce.com/einsteincopilotcrucial for a clear understanding of an application\u2019s\narchitecture.\nThe taxonomy adopts an original architectural per-\nspective, focusing on how the application interacts\nwith the LLM while abstracting from the specifics\nof application domains. For researchers, the taxon-\nomy contributes to shape a common understanding\nand terminology, thus aiding theory building in this\nemerging domain [29, 50, 18]. For practitioners, the\ntaxonomy provides inspiration for potential uses of\nLLMs in applications, presents design options, and\nhelps identify challenges and approaches to address\nthem.\nObjectives. In this study, a taxonomy is understood\nas a set of dimensions divided into characteristics.\nTheobjectiveistoidentifydimensionsthatareuseful\nfor categorizing the integration of LLMs in applica-\ntions from an architectural perspective. To be most\neffective, the taxonomy should be easy to understand\nand apply, yet distinctive enough to uncover the es-\nsential aspects. Additionally, we aim to develop a\nvisual representation tailored to the taxonomy\u2019s in-\ntended purposes.\nOverview. The following section 2 provides back-\nground on LLMs and introduces relevant concepts.\nSection 3 presents an overview of related work. The\nstudy design adheres to a Design Science Research\napproach[46]. Weapplyestablishedmethodsfortax-\nonomy design [42, 48] as described in Section 4. This\nsection also presents the sample of LLM-integrated\napplications used for this study. The developed tax-\nonomy is presented, demonstrated and formally eval-\nuated in section 5. In section 6, we discuss its usabil-\nity and usefulness. Section 7 summarizes the contri-\nbutions, addresses limitations, and concludes.\n2. Large Language Models\n2.1. Background\nState-of-the-art LLMs such as GPT-3.5, GPT-4,\nLlama, PALM2, etc., are artificial neural networks\nconsisting of neurons, i.e., very simple processing\n2", "mimetype": "text/plain", "start_char_idx": 1675, "end_char_idx": 4103, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "867c7dd3-1e67-4dc4-8991-0113c7e1cec7": {"__data__": {"id_": "867c7dd3-1e67-4dc4-8991-0113c7e1cec7", "embedding": null, "metadata": {"page_label": "3", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c5e38ca-0ab1-428c-ba7f-a3fd8501b136", "node_type": "4", "metadata": {"page_label": "3", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "19f0903ba8444d9f7f81c82bf8702a1a1475ef06b1e0e19f1f3515f8a66753e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fe14dbe9-2c6c-46bd-93a9-bd3de6beff03", "node_type": "1", "metadata": {}, "hash": "8329f5a31008efd5f5f00c654b1c64e41bc52cf7fc025267205a74d1abf2e316", "class_name": "RelatedNodeInfo"}}, "text": "units, that are organized in layers and connected by\nweighted links. Training a neural network means\nadapting these weights such that the neural network\nshows a certain desired behavior. Specifically, an\nLLM is trained to predict the likelihoods of pieces\nof text termed, tokens, to occur as continuations of\na given text presented as input to the LLM. This in-\nput is referred to as prompt. The prompt combined\nwith the produced output constitutes the contextof\nan LLM. It may comprise more than 100k tokens in\nstate-of-the-artLLMs2. Still, itslengthislimitedand\ndeterminesthemaximumsizeofpromptsandoutputs\nthat an LLM is capable of processing and generating\nat a time.\nTraining of an LLM optimizes its parameters such\nthat its computed likelihoods align with real text ex-\namples. The training data is a vast body of text snip-\npets extracted, processed, and curated from sources\nsuchasWikipedia,Githubcoderepositories,common\nwebsites, books, or news archives. An LLM trained\non massive examples is termed a foundation model\norpre-trained model . During training, an LLM not\nonly learns to produce correct language but also ab-\nsorbs and stores information and factual knowledge.\nHowever, it is well known that LLMs frequently pick\nup biases, leading to ethical problems. They may\nalso produce factually incorrect outputs that sound\nplausible and convincing, termed hallucinations .\nRecent findings show that LLMs can be applied to\na wide range of tasks by appropriately formulating\nprompts. Different prompt patterns succeed in dif-\nferent tasks. Basic approaches rely on instructing\nthe LLM to solve a task described or explained in\nthe prompt. In few-shot prompting (also known as\nfew-shot learning), the prompt is augmented with ex-\nampleinput-outputpairsillustratinghowtosolvethe\ntask, e.g., the requested output format. The number\nof examples can vary. Prompting with one example is\ncalledone-shot prompting, while prompting without\nanyexamplesiscalled zero-shot prompting. One-shot\nandfew-shot prompting fall under the broader cat-\negory of in-context learning . Prompt patterns such\n2https://platform.openai.com/docs/modelsaschain-of-thought andthinking-aloud aim to elicit\nadvanced reasoning capabilities from LLMs.\nAs effective prompts are crucial for unlocking the di-\nverse capabilities of an LLM, the discipline of prompt\nengineering is evolving, focusing on the systematic\ndesign and management of prompts [66, 9, 53, 31].\n2.2.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fe14dbe9-2c6c-46bd-93a9-bd3de6beff03": {"__data__": {"id_": "fe14dbe9-2c6c-46bd-93a9-bd3de6beff03", "embedding": null, "metadata": {"page_label": "3", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8c5e38ca-0ab1-428c-ba7f-a3fd8501b136", "node_type": "4", "metadata": {"page_label": "3", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "19f0903ba8444d9f7f81c82bf8702a1a1475ef06b1e0e19f1f3515f8a66753e4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "867c7dd3-1e67-4dc4-8991-0113c7e1cec7", "node_type": "1", "metadata": {"page_label": "3", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "80b9b2481fc46f45d2d20b0c0b81c87473d3863727577396429d671ef7a4e392", "class_name": "RelatedNodeInfo"}}, "text": "In few-shot prompting (also known as\nfew-shot learning), the prompt is augmented with ex-\nampleinput-outputpairsillustratinghowtosolvethe\ntask, e.g., the requested output format. The number\nof examples can vary. Prompting with one example is\ncalledone-shot prompting, while prompting without\nanyexamplesiscalled zero-shot prompting. One-shot\nandfew-shot prompting fall under the broader cat-\negory of in-context learning . Prompt patterns such\n2https://platform.openai.com/docs/modelsaschain-of-thought andthinking-aloud aim to elicit\nadvanced reasoning capabilities from LLMs.\nAs effective prompts are crucial for unlocking the di-\nverse capabilities of an LLM, the discipline of prompt\nengineering is evolving, focusing on the systematic\ndesign and management of prompts [66, 9, 53, 31].\n2.2. Definitions\nInvoking an LLM results in an input-processing-\noutput sequence: Upon receiving a prompt, the LLM\nprocesses it and generates an output. We refer to an\nindividual sequence of input-processing-output per-\nformed by the LLM as LLM invocation , and define\nanLLM-integrated application as a system in which\nthe software generates the prompt for the LLM and\nprocesses its output. The concept of an application\nis broad, encompassing service-oriented architectures\nand systems with components loosely coupled via\nAPI calls.\nGiven an LLM\u2019s versatility, an application can uti-\nlize it for different tasks, each demanding a specific\napproach to create the prompt and handle the re-\nsult. This paper defines a particular software compo-\nnentthataccomplishesthisasan LLM-based software\ncomponent or, simply, LLM component . An LLM-\nintegrated application can comprise several LLM\ncomponents. The study develops a taxonomy for\nLLM components. LLM-integrated applications are\ndescribed as combinations of their LLM components.\n3. Related Work\nWith the recent progress in generative AI and LLMs,\nthe interest in these techniques has increased, and\nnumerous surveys have been published, providing an\nextensive overview of technical aspects of LLMs [72],\nreviewingLLMsastoolsforsoftwareengineering[22],\nand discussing the technical challenges of applying\nLLMs across various fields [25]. Further studies ad-\ndress the regulatory and ethical aspects of Genera-\ntive AI and ChatGPT, with a particular focus on\nAI-human collaboration [41], and Augmented Lan-\nguage Models (ALMs), which are LLMs that enhance\n3", "mimetype": "text/plain", "start_char_idx": 1649, "end_char_idx": 4046, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "540cb723-9160-457c-b63e-461e65a467a6": {"__data__": {"id_": "540cb723-9160-457c-b63e-461e65a467a6", "embedding": null, "metadata": {"page_label": "4", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf5139e8-25ab-44f3-b473-e5091db7b64d", "node_type": "4", "metadata": {"page_label": "4", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "c280f9105625d8f7bcf48a7b1543e3c75ad7e8c7e9fe7ca5bcb3c4721ce6dbd3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "904d3415-12ad-4d7e-9dad-1298db8fddc6", "node_type": "1", "metadata": {}, "hash": "638adb11edd4c2665260faf302b8118b1e480f3f21b26030589a22ddf8115b4a", "class_name": "RelatedNodeInfo"}}, "text": "their capabilities by querying tools such as APIs,\ndatabases, and web search engines [38].\nTaxomonies related to LLMs include a taxonomy for\nprompts designed to solve complex tasks [49] and a\ntaxonomy of methods for cost-effectively invoking a\nremote LLM [60]. A comparative analysis of stud-\nies on applications of ChatGPT is provided by [27],\nwhereas LLMs are compared based on their applica-\ntion domains and the tasks they solve in [20]. Most\nclosely related to the taxonomy developed here is a\ntaxonomy for LLM-powered multiagent architectures\n[21] which focuses on autonomous agents with less\ntechnical detail. Taxonomies of applications of AI in\nenterprises [48] and applications of generative AI, in-\ncluding but not limited to LLMs [52], are developed\nusing methods similar to those in our study.\nSeveral taxonomies in the field of conversational\nagents and task-oriented dialog (TOD) systems ad-\ndresssystemarchitecture[1,40,12,3]. However, they\nomitdetailedcoverageoftheintegrationofgenerative\nlanguage models.\n4. Methods\nWe constructed the taxonomy following established\nguidelines [42, 48, 29], drawing from a sample of\nLLM-integrated applications. These applications are\ndetailed in section 4.1.\n4.1. Development\nTaxonomy. We derived an initial taxonomy from the\nstandard architecture of conversational assistants de-\nscribed in [3], guided by the idea that conversational\nassistants are essentially \u201cchatbots with tools\u201d, i.e.,\nlanguage-operated user interfaces that interact with\nexternalsystems. Thisapproachprovedunsuccessful.\nThe second version was based on the classical three-\ntier software architecture, and then extended over\nseveral development cycles. By repeatedly apply-\ning the evolving taxonomy to the example instances,\nwe identified dimensions and characteristics using an\n\u201cempirical-to-conceptual\u201d approach. When new di-\nmensionsemerged, additionalcharacteristicswerede-\nrived in a \u201cconceptual-to-empirical\u201d manner. Afterfive major refinement cycles, the set of dimensions\nand characteristics solidified. In the subsequent eval-\nuation phase, we applied the taxonomy to a new set\nof example instances that were not considered while\nconstructing the taxonomy. As the dimensions and\ncharacteristics remained stable, the taxonomy was\nconsidered complete. In the final phase, we refined\nthe wording and visual format of the taxonomy.\nVisualization. Developing a taxonomy involves cre-\nating a representation that effectively supports its\nintended purpose [29].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2488, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "904d3415-12ad-4d7e-9dad-1298db8fddc6": {"__data__": {"id_": "904d3415-12ad-4d7e-9dad-1298db8fddc6", "embedding": null, "metadata": {"page_label": "4", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bf5139e8-25ab-44f3-b473-e5091db7b64d", "node_type": "4", "metadata": {"page_label": "4", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "c280f9105625d8f7bcf48a7b1543e3c75ad7e8c7e9fe7ca5bcb3c4721ce6dbd3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "540cb723-9160-457c-b63e-461e65a467a6", "node_type": "1", "metadata": {"page_label": "4", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "4a28a0e753deda3bb8088d5c134bd1c7679a14deb4bd20828e72204fa59b0abf", "class_name": "RelatedNodeInfo"}}, "text": "The second version was based on the classical three-\ntier software architecture, and then extended over\nseveral development cycles. By repeatedly apply-\ning the evolving taxonomy to the example instances,\nwe identified dimensions and characteristics using an\n\u201cempirical-to-conceptual\u201d approach. When new di-\nmensionsemerged, additionalcharacteristicswerede-\nrived in a \u201cconceptual-to-empirical\u201d manner. Afterfive major refinement cycles, the set of dimensions\nand characteristics solidified. In the subsequent eval-\nuation phase, we applied the taxonomy to a new set\nof example instances that were not considered while\nconstructing the taxonomy. As the dimensions and\ncharacteristics remained stable, the taxonomy was\nconsidered complete. In the final phase, we refined\nthe wording and visual format of the taxonomy.\nVisualization. Developing a taxonomy involves cre-\nating a representation that effectively supports its\nintended purpose [29]. Taxonomies can be repre-\nsented in various formats, with morphological boxes\n[54, 55] or radar charts [21] being well-established\napproaches. We evaluated morphological boxes, be-\ncause they effectively position categorized instances\nwithinthedesignspace. However, wefoundthatthey\nmake it difficult to perceive a group of categorized in-\nstances as a whole since they occupy a large display\narea. This drawback is significant for our purposes,\nas LLM-integrated applications often comprise mul-\ntiple LLM components. Therefore, we developed a\nmore condensed visualization of the taxonomy based\non feature vectors.\nExample instances. We searched for instances of\nLLM-integrated applications for taxonomy develop-\nment that should meet the following criteria:\n\u2022The application aims for real-world use rather\nthan focusing on research only (such as testbeds\nfor experiments or proofs-of-concept). It demon-\nstrateseffortstowardspracticalusabilityandad-\ndresses challenges encountered in real-world sce-\nnarios.\n\u2022The application\u2019s architecture, particularly its\nLLM components, is described in sufficient de-\ntail for analysis.\n\u2022The sample of instances covers a diverse range\nof architectures.\n\u2022Theexampleinstancesaresituatedwithinindus-\ntrial or technical domains, as we aim to focus on\nLLM-integrated applications beyond well-known\nfields like law, medicine, marketing, human re-\nsources, and education.\n4", "mimetype": "text/plain", "start_char_idx": 1545, "end_char_idx": 3892, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "de4b8d26-eced-403b-a67b-5b7ff444e716": {"__data__": {"id_": "de4b8d26-eced-403b-a67b-5b7ff444e716", "embedding": null, "metadata": {"page_label": "5", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "986e161e-6a76-4b2d-911b-bff900a376b3", "node_type": "4", "metadata": {"page_label": "5", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "33b8e208473ebf60cfdfb99564b72e185e6f54d77e9e2affe841e694e2895da9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4c0c8da1-972b-429f-9fe6-909bbdd48f5d", "node_type": "1", "metadata": {}, "hash": "b65d2fcc204c7c08fd36fd533070a2e1107e9db844d817cebe2cb008f47d76fe", "class_name": "RelatedNodeInfo"}}, "text": "The search revealed a predominance of theoretical re-\nsearch on LLM-integrated applications while papers\nfocusing on practically applied systems were scarce.\nSearching non-scientific websites uncovered commer-\ncially advertised AI-powered applications, but their\ninternalworkingsweretypicallyundisclosed, andreli-\nable evaluations were lacking. Furthermore, the het-\nerogeneous terminology and concepts in this emerg-\ning field make a comprehensive formal literature\nsearch unfeasible. Instead, by repeatedly search-\ning Google Scholar and non-scientific websites using\nterms \u201cLLM-integrated applications\u201d, \u201cLLM-powered\napplications\u201d, \u201cLLM-enhanced system\u201d, \u201cLLM\u201d and\n\u201ctools\u201d, alongsimilarvariants, weselectedsixsuitable\ninstances. Some of them integrate LLMs in multiple\nways, totaling eleven distinct LLM components.\nFor a thorough evaluation, we selected new instances\nusing relaxed criteria, including those intended for\nresearch. Additionally, we included a real-world ex-\nample lacking explicit documentation to broaden the\ndiversity of our sample and assess the taxonomy\u2019s\ncoverage. Within the five selected instances, we iden-\ntified ten LLM components.\n4.2. Sample of LLM-integrated applications\nTable1givesanoverviewofthesample. Namesofap-\nplications and LLM components are uniformly writ-\ntenasoneCamelCasewordandtypesetinsmallcaps,\ndeviating from the format chosen by the respective\nauthors.\nHoneycomb .Honeycomb is an observability plat-\nform collecting data from software applications in\ndistributed environments for monitoring. Users\ndefine queries to retrieve information about the\nobserved software systems through Honeycomb \u2019s\nQuery Builder UI. The recently added LLM-based\nQueryAssistant allows users to articulate inquiries\nin plain English, such as \u201cslow endpoints by status\ncode\u201d or \u201cwhich service has the highest latency?\u201d\nTheQueryAssistant converts these into queries in\nHoneycomb \u2019s format, which users can execute and\nmanually refine [7, 8].LowCode .LowCode is a web-based application\nconsisting of a prompt-definition section and a di-\nalogue section. The prompt-definition section sup-\nports the design of prompts for complex tasks, such\nas composing extensive essays, writing resumes for\njob applications or acting as a hotel service chatbot\n[5]. In the dialogue section, users converse with an\nLLM to complete the complex task based on the de-\nfined prompt.\nLowCode comprises two LLM components termed\nPlanning andExecuting .Planning operates in\nthe prompt-definition section, where a user roughly\ndescribes a complex task, and Planning designs a\nworkflowforsolvingit.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2598, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4c0c8da1-972b-429f-9fe6-909bbdd48f5d": {"__data__": {"id_": "4c0c8da1-972b-429f-9fe6-909bbdd48f5d", "embedding": null, "metadata": {"page_label": "5", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "986e161e-6a76-4b2d-911b-bff900a376b3", "node_type": "4", "metadata": {"page_label": "5", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "33b8e208473ebf60cfdfb99564b72e185e6f54d77e9e2affe841e694e2895da9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "de4b8d26-eced-403b-a67b-5b7ff444e716", "node_type": "1", "metadata": {"page_label": "5", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "918b1418d500f79a4fae321c19a5522f9044e4e11f03db8a38808cdadd68764c", "class_name": "RelatedNodeInfo"}}, "text": "The prompt-definition section sup-\nports the design of prompts for complex tasks, such\nas composing extensive essays, writing resumes for\njob applications or acting as a hotel service chatbot\n[5]. In the dialogue section, users converse with an\nLLM to complete the complex task based on the de-\nfined prompt.\nLowCode comprises two LLM components termed\nPlanning andExecuting .Planning operates in\nthe prompt-definition section, where a user roughly\ndescribes a complex task, and Planning designs a\nworkflowforsolvingit. Theprompt-definitionsection\noffers a low-code development environment where the\nLLM-generated workflow is visualized as a graphi-\ncal flowchart, allowing a user to edit and adjust the\nlogic of the flow and the contents of its steps. For\ninstance, in essay-writing scenarios, this involves in-\nserting additional sections, rearranging sections, and\nrefining the contents of sections. Once approved by\nthe user, LowCode translates the modified work-\nflow back into natural language and incorporates it\ninto a prompt for Executing . In the dialogue sec-\ntion, users converse in interactive, multi-turn dia-\nlogueswith Executing . Asdefinedintheprompt, it\nacts as an assistant for tasks such as writing an essay\nor resume, or as a hotel service chatbot. While the\nidea of the LLM planning a workflow might suggest\nusing the LLM for application control, LowCode\nPlanning actuallyservesasapromptgeneratorthat\nsupports developing prompts for complex tasks.\nMyCrunchGpt .MyCrunchGpt acts as an ex-\npert system within the engineering domain, specif-\nically for airfoil design and calculations in fluid me-\nchanics. These tasks require complex workflows com-\nprising several steps such as preparing data, param-\neterizing tools, and evaluating results, using vari-\nous software systems and tools. The aim of My-\nCrunchGpt is to facilitate the definition of these\nworkflows and automate their execution [28].\nMyCrunchGpt offers a web interface featuring a\ndialogue window for inputting commands in plain\nEnglish, along with separate windows displaying the\n5", "mimetype": "text/plain", "start_char_idx": 2079, "end_char_idx": 4145, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "19e62c7c-8bd5-4728-8a18-6ac6f3d0c6ea": {"__data__": {"id_": "19e62c7c-8bd5-4728-8a18-6ac6f3d0c6ea", "embedding": null, "metadata": {"page_label": "6", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ffa3c4bc-7329-4985-a17c-03355b7fa5f0", "node_type": "4", "metadata": {"page_label": "6", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "c2f4545744faafee0a5385c1bea4a81885ea021c969184bb0f05013d220b5427", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "dbb4bd89-c760-4299-b2ac-1731b5a2d818", "node_type": "1", "metadata": {}, "hash": "e86b43dfc269d8f28ba8d2dd10529ebab82253ae58b750eee7861cfb690ad6a9", "class_name": "RelatedNodeInfo"}}, "text": "Table 1: Example instances selected for development (top 6) and evaluation (bottom 5)\nApplication References LLM components\nHoneycomb [7, 8] QueryAssistant\nLowCode [5],[35] Planning ,Executing\nMyCrunchGpt [28] DesignAssistant ,SettingsEditor ,DomainExpert\nMatrixProduction [69] Manager ,Operator\nWorkplaceRobot [37] TaskPlanning\nAutoDroid [64] TaskExecutor ,MemoryGenerator\nProgPrompt [51] ActionPlanning ,ScenarioFeedback\nFactoryAssistants [26] QuestionAnswering\nSgpTod [71] DstPrompter ,PolicyPrompter\nTruckPlatoon [70] Reporting\nExcelCopilot [16, 44] ActionExecutor ,Advisor ,IntentDetector ,Explainer\noutput and results of software tools invoked by My-\nCrunchGpt in the backend. MyCrunchGpt relies\non predefined workflows, not supporting deviations\nor cycles. By appending a specific instruction to the\ndialogue history in the prompt for each step of the\nworkflow, it uses the LLM as a smart parser to ex-\ntract parameters for APIs and backend tools from\nuser input. APIs and tools are called in the prede-\nfined order [28, p. 56].\nMyCrunchGpt is still in development. The paper\n[28] explains the domain as well as the integration of\nthe LLM, but does not fully detail the implementa-\ntion of the latter. Still, MyCrunchGpt illustrates\ninnovative applications of an LLM in a technical do-\nmain. We categorize three LLM components solving\ntasks within MyCrunchGpt : aDesignAssistant\nguiding users through workflows and requesting pa-\nrameters for function and API calls; a SettingsEd-\nitorupdating a JSON file with settings for a back-\nendsoftwaretool; anda DomainExpert whichhelps\nevaluating results by comparing them to related re-\nsults, e.g., existing airfoil designs, which it derives\nfrom its trained knowledge.\nMatrixProduction .MatrixProduction em-\nploys an LLM for controlling a matrix production\nsystem [69]. While in a classical line production\nsetup, workstations are arranged linearly and the\nmanufacturing steps follow a fixed sequence, matrix\nproduction is oriented towards greater flexibility.Autonomous transport vehicles carry materials\nand intermediate products to workstations, termed\nautomation modules, each offering a spectrum of\nmanufacturing skills that it can contribute to the\nproduction process. Compared to line production,\nmatrix production is highly adaptable and can\nmanufacture a variety of personalized products with\nfull automation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2370, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "dbb4bd89-c760-4299-b2ac-1731b5a2d818": {"__data__": {"id_": "dbb4bd89-c760-4299-b2ac-1731b5a2d818", "embedding": null, "metadata": {"page_label": "6", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ffa3c4bc-7329-4985-a17c-03355b7fa5f0", "node_type": "4", "metadata": {"page_label": "6", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "c2f4545744faafee0a5385c1bea4a81885ea021c969184bb0f05013d220b5427", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "19e62c7c-8bd5-4728-8a18-6ac6f3d0c6ea", "node_type": "1", "metadata": {"page_label": "6", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "48710847c2318f507aa12b8656f8fd37f3877aa9c3bf68515d88705a9312ba8f", "class_name": "RelatedNodeInfo"}}, "text": "MatrixProduction .MatrixProduction em-\nploys an LLM for controlling a matrix production\nsystem [69]. While in a classical line production\nsetup, workstations are arranged linearly and the\nmanufacturing steps follow a fixed sequence, matrix\nproduction is oriented towards greater flexibility.Autonomous transport vehicles carry materials\nand intermediate products to workstations, termed\nautomation modules, each offering a spectrum of\nmanufacturing skills that it can contribute to the\nproduction process. Compared to line production,\nmatrix production is highly adaptable and can\nmanufacture a variety of personalized products with\nfull automation. This requires intelligent production\nmanagement to (a) create workplans that orchestrate\nand schedule the automation modules\u2019 skills, and (b)\nprogram the involved automation modules such that\nthey execute the required processing steps.\nMatrixProduction incorporates two LLM compo-\nnents: Manager creates workplans as sequences of\nskills (a), while Operator generates programs for\nthe involved automation modules (b).\nMatrixProduction prompts Manager andOp-\nerator to provide textual explanations in addition\nto the required sequences of skills or automation\nmodule programs. The LLM output is processed\nby a parser before being used to control the physi-\ncal systems. Manager relies on built-in production-\nspecific knowledge of the LLM such as \u201ca hole is pro-\nduced by drilling\u201d.\nNoteworthy in this approach is its tight integra-\ntion into the system landscape of Industry 4.0.\nThefew-shot Manager andOperator prompts\nare generated automatically using Asset Adminis-\ntration Shells , which are standardized, technology-\n6", "mimetype": "text/plain", "start_char_idx": 1721, "end_char_idx": 3393, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75e5e4e6-ff5f-4165-aa63-9cb87823274b": {"__data__": {"id_": "75e5e4e6-ff5f-4165-aa63-9cb87823274b", "embedding": null, "metadata": {"page_label": "7", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "049ae56c-7172-4018-803f-248b20ce3b4d", "node_type": "4", "metadata": {"page_label": "7", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "3ed3f02849fd94284976cd841e427e0f88b331ea17984f0fff4e81301aac69cb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d937162-5e26-4ea5-aeae-7ab937ef1ab3", "node_type": "1", "metadata": {}, "hash": "39bf5a4faa2c9e2b81a84b8807d768572021342addff0b20a558112d538f1326", "class_name": "RelatedNodeInfo"}}, "text": "independent data repositories storing digital twins of\nmanufacturing assets for use in Industry 4.0 [2].\nWorkplaceRobot .An experimental robot system\nis enhanced with LLM-based task planning in [37].\nThe robot operates in a workplace environment fea-\nturing a desk and several objects. It has previously\nbeen trained to execute basic operations expressed\nin natural language such as \u201copen the drawer\u201d or\n\u201ctake the pink object and place it in the drawer\u201d.\nLLM-based task planning enables the robot to per-\nform more complex orders like \u201ctidy up the work area\nand turn off all the lights\u201d. To this end, an LLM is\nprompted to generate a sequence of basic operations\nthat accomplish the complex order.\nAlthough the robot expects operations phrased in\nnatural language, the LLM is prompted with a\nPython coding task. For instance, the basic opera-\ntion\u201cturnonthegreenlight\u201d correspondstoaPython\ncommand push_button(\u2019green\u2019) . The prompt for\nthe LLM includes several examples each consisting\nof a description of an environment state, a complex\norder formatted as a comment, and a sequence of\nPython robot commands that accomplish the com-\nplex order. When invoking the LLM to generate the\nPython program for a new order, the prompt is aug-\nmented with a description of the environment\u2019s cur-\nrent state and the new order as a comment.\nThe Python code produced by the LLM is trans-\nlated back to a sequence of basic operations in nat-\nural language. When the robot executes these oper-\nations, there is no feedback about successful comple-\ntion. Rather, the system assumes that all basic op-\nerations require a fixed number of timesteps to com-\nplete.\nAutoDroid .The goal of mobile task automation is\nhands-free user interaction for smartphones through\nvoice commands. AutoDroid is a voice control sys-\ntem for smartphones that can automatically execute\ncomplex orders such as \u201cremind me to do laundry on\nMay 11th\u201d or \u201cdelete the last photo I took\u201d [64, 65].\nSuch complex orders are fulfilled by performing se-\nquences of basic operations in an Android app, suchas \u201cscroll down, then press button x\u201d in the calen-\ndar app. AutoDroid employs an LLM component\nTaskExecutor to plan these sequences of opera-\ntions. The challenge is that the next operation to ex-\necutedependsonthecurrentstateoftheAndroidapp\nwhich continuously changes as the app is operated.\nAutoDroid solves this by invoking the TaskEx-\necutor repeatedly after each app operation with the\nprompt comprising the updated state of the Graph-\nical User Interface (GUI) along with the user\u2019s com-\nplex order.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2561, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d937162-5e26-4ea5-aeae-7ab937ef1ab3": {"__data__": {"id_": "0d937162-5e26-4ea5-aeae-7ab937ef1ab3", "embedding": null, "metadata": {"page_label": "7", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "049ae56c-7172-4018-803f-248b20ce3b4d", "node_type": "4", "metadata": {"page_label": "7", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "3ed3f02849fd94284976cd841e427e0f88b331ea17984f0fff4e81301aac69cb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75e5e4e6-ff5f-4165-aa63-9cb87823274b", "node_type": "1", "metadata": {"page_label": "7", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "0368c3e1484f75545ba06490555a06aadbe406824610ec7c4068fb656d55851b", "class_name": "RelatedNodeInfo"}}, "text": "AutoDroid is a voice control sys-\ntem for smartphones that can automatically execute\ncomplex orders such as \u201cremind me to do laundry on\nMay 11th\u201d or \u201cdelete the last photo I took\u201d [64, 65].\nSuch complex orders are fulfilled by performing se-\nquences of basic operations in an Android app, suchas \u201cscroll down, then press button x\u201d in the calen-\ndar app. AutoDroid employs an LLM component\nTaskExecutor to plan these sequences of opera-\ntions. The challenge is that the next operation to ex-\necutedependsonthecurrentstateoftheAndroidapp\nwhich continuously changes as the app is operated.\nAutoDroid solves this by invoking the TaskEx-\necutor repeatedly after each app operation with the\nprompt comprising the updated state of the Graph-\nical User Interface (GUI) along with the user\u2019s com-\nplex order.\nBefore executing irrevocable operations, such as per-\nmanently deleting data or calling a contact, Auto-\nDroidprompts the user to confirm or adjust the op-\neration. TaskExecutor is instructed to include a\n\u201cconfirmation needed\u201d hint in its output for such op-\nerations.\nThe prompt for TaskExecutor comprises an ex-\ntract from a knowledge base which is built automati-\ncally in an offline learning phase as follows: In a first\nstep, a \u201cUI Automator\u201d (which is not an LLM com-\nponent) automatically and randomly operates the\nGUI elements of an Android app to generate a UI\nTransition Graph (UTG). The UTG has GUI states\nas nodes and the possible transitions between GUI\nstates as edges. As next steps, AutoDroid invokes\ntwo LLM components referred to as MemoryGen-\nerators to analyze the UTG.\nThe first MemoryGenerator is prompted repeat-\nedly for each GUI state in the UTG. Its task is to\nexplain the functionality of the GUI elements. Be-\nsides instructions and examples of the table format\ndesired as output, its prompt includes an HTML rep-\nresentation of the GUI state, the GUI actions preced-\ning this state, and the GUI element operated next.\nIts output consists of tuples explaining the function-\nality of a GUI element by naming the derived func-\ntionality (e.g., \u201cdelete all the events in the calendar\napp\u201d)andtheGUIstatesandGUIelementactionsin-\nvolved. Similarly, the second MemoryGenerator\nis prompted to output a table listing GUI states and\nexplanations of their functions. These tables consti-\ntuteAutoDroid \u2019s knowledge base.\nProgPrompt .ProgPrompt [51] is an approach\nto LLM-based robot task planning similar to\n7", "mimetype": "text/plain", "start_char_idx": 1762, "end_char_idx": 4189, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e42f13e-663c-4e08-ba8d-8d68e9efefbf": {"__data__": {"id_": "2e42f13e-663c-4e08-ba8d-8d68e9efefbf", "embedding": null, "metadata": {"page_label": "8", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe55e9aa-9a5a-456f-a058-dacc68780a26", "node_type": "4", "metadata": {"page_label": "8", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "9312ca1c7cafed9365ac82e20c799dc7ab1a012576bf5c86912d9ac546dc3ffe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "89795346-1932-4049-ac8f-bb22dcb7bd73", "node_type": "1", "metadata": {}, "hash": "1bb8e0d0d513ff91d24561e718517c2297e7108fb7d69c767ce3e40e9dd5515e", "class_name": "RelatedNodeInfo"}}, "text": "WorkplaceRobot . Its robot is controlled by\nPython code and works in a real and a simulated\nhousehold environment.\nProgPrompt comprisestwoLLMcomponents. Ac-\ntionPlanning generates Python scripts for tasks\nsuch as \u201cmicrowave salmon\u201d using basic opera-\ntions like grab(\u2019salmon\u2019) ,open(\u2019microwave\u2019) ,\nandputin(\u2019salmon\u2019, \u2019microwave\u2019) , notably with-\nout considering the current state of the environment.\nTo establish a feedback loop with the environment,\nActionPlanning adds assertstatements. These\nstatements verify the preconditions of basic opera-\ntionsandtriggerremedialactionswhenpreconditions\nare not met. For instance, a script for \u201cmicrowave\nsalmon\u201d comprises the following code fragment:\nif assert(\u2019microwave\u2019 is \u2019opened\u2019)\nelse: open(\u2019microwave\u2019)\nputin(\u2019salmon\u2019, \u2019microwave\u2019)\nWhen operating in the simulated environment,\nProgPrompt can verify an assert statement\nthrough its second LLM component, Scenario-\nFeedback . Prompted with the current state of the\nenvironment and the assertstatement, Scenario-\nFeedback evaluates it and outputs TrueorFalse.\nFactoryAssistants .FactoryAssistants advise\nworkers on troubleshooting production line issues in\ntwo manufacturing domains: detergent production\nand textile production [26]. The assistants leverage\ndomain knowledge from FAQs and documented prob-\nlem cases to answer user queries. The required do-\nmain knowledge is provided as a part of the prompt.\nSgpTod .SgpTod employs an LLM to implement a\nchatbot, specifically, a task-oriented dialogue (TOD)\nsystem [71]. TOD systems are also known as conver-\nsational assistants. In contrast to open-domain dia-\nlogue (ODD) systems, which engage users in goalless\nconversations, they are designed for assisting users in\nspecific tasks.\nIn general, TOD systems require the following\ncomponents [3]: Natural Language Understanding\n(NLU), analyzing the user\u2019s input to classify intents\nand extract entities; Dialogue Management (DM) fordeciding on a system action that is appropriate in\na given dialogue state (e.g., ask for more informa-\ntion or invoke a hotel booking service); and Natu-\nral Language Generation (NLG) for producing a re-\nsponse that the TOD system can present to the user.\nIntent classification, also known as intent detection,\nmatches free-text user input to one of several tasks a\nTOD system can perform (e.g., book a hotel). Entity\nextraction isolates situational values, called entities,\nfrom the user input (e.g., the town and the date of\nthe hotel booking).", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2475, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "89795346-1932-4049-ac8f-bb22dcb7bd73": {"__data__": {"id_": "89795346-1932-4049-ac8f-bb22dcb7bd73", "embedding": null, "metadata": {"page_label": "8", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fe55e9aa-9a5a-456f-a058-dacc68780a26", "node_type": "4", "metadata": {"page_label": "8", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "9312ca1c7cafed9365ac82e20c799dc7ab1a012576bf5c86912d9ac546dc3ffe", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e42f13e-663c-4e08-ba8d-8d68e9efefbf", "node_type": "1", "metadata": {"page_label": "8", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "cae34f8d9d6a008bec25ebb76e5b2c00412191b17b9e2661fda7f9eb0ef56f4b", "class_name": "RelatedNodeInfo"}}, "text": "In general, TOD systems require the following\ncomponents [3]: Natural Language Understanding\n(NLU), analyzing the user\u2019s input to classify intents\nand extract entities; Dialogue Management (DM) fordeciding on a system action that is appropriate in\na given dialogue state (e.g., ask for more informa-\ntion or invoke a hotel booking service); and Natu-\nral Language Generation (NLG) for producing a re-\nsponse that the TOD system can present to the user.\nIntent classification, also known as intent detection,\nmatches free-text user input to one of several tasks a\nTOD system can perform (e.g., book a hotel). Entity\nextraction isolates situational values, called entities,\nfrom the user input (e.g., the town and the date of\nthe hotel booking). The TOD system may require\nseveral dialogue turns to elicit all necessary entities\nfrom the user. In TOD research, the system\u2019s in-\nternal representation of the user\u2019s intentions and the\nentity values is commonly referred to as its \u201cbelief\nstate\u201d. For example, in the restaurant search domain,\nthe belief state may include attribute-value pairs like\ncuisine:Indian andpricerange:medium.\nSgpTod is a multi-domain TOD system, concur-\nrently handling multiple task domains found in stan-\ndard TOD evaluation datasets, such as recommend-\ning restaurants or finding taxis. Similar to other ex-\nperimental TOD systems [23], SgpTod accesses a\ndatabase that stores information from the task do-\nmains, such as available hotels and restaurants.\nSgpTod comprises two LLM components, called\nDstPrompter andPolicyPrompter , that are\nbothinvokedineverydialogueturnbetween SgpTod\nand the user. The DstPrompter handles the NLU\naspect, analyzing the user\u2019s input and populating the\nsystem\u2019s belief state. It outputs is an SQL query\nsuited to extract the database entries that match the\ncurrent belief state. Upon retrieving the database en-\ntries, SgpTod invokes its PolicyPrompter which\ncovers both DM and NLG. Prompted with the dia-\nlogue history and the database entries retrieved, it\nproduces a two-part output: a natural language re-\nsponse for NLG and a system action for DM.\nTruckPlatoon .The concept of truck platooning\nmeans that trucks travel closely together for bet-\nter fuel efficiency and traffic flow. TruckPla-\ntooncomprises an algorithmic control loop which\nautonomously maintains a consistent distance be-\ntween trucks. It invokes an LLM to generate natural-\nlanguage reports on the platoon\u2019s performance and\n8", "mimetype": "text/plain", "start_char_idx": 1732, "end_char_idx": 4188, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c59406bd-c5c6-4ae4-b778-a99fd0e0b968": {"__data__": {"id_": "c59406bd-c5c6-4ae4-b778-a99fd0e0b968", "embedding": null, "metadata": {"page_label": "9", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58d6bbdd-8bfa-463c-bc53-94ff46cf55d8", "node_type": "4", "metadata": {"page_label": "9", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "97f2d946240114de02fb782bfd7bae54a0471359f11533fb81f4bc863e8d7e97", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4ccd390b-9691-42ad-9bc2-7a0b19f7decf", "node_type": "1", "metadata": {}, "hash": "a1b27cfcbb22b4c46ce69bdf626edb9086d660b8759811762618d63cb9fdfba5", "class_name": "RelatedNodeInfo"}}, "text": "stability from measurements tracked by the control\nalgorithm, providing easily understandable informa-\ntion for engineers involved in monitoring and opti-\nmizing the truck platooning system.\nExcelCopilot .ExcelCopilot is an example of\na recent trend where software companies integrate\nLLM-based assistants, often termed \u201ccopilots\u201d, into\ntheir products [44]. These copilots not only provide\ntextual guidance but also perform actions within the\nsoftware environment, constituting a distinctive type\nof LLM-integrated application. We chose Excel-\nCopilot as an example for evaluating our taxonomy.\nSince its implementation is undisclosed, we infer its\narchitecturefromindirectsources, includingascreen-\ncast and a report on insights and experiences from\ncopilot developers [16, 44]. This inferred architecture\nmay deviate from the actual implementation.\nExcelCopilot is accessible in a task bar along-\nside the Excel worksheet. It features buttons with\ncontext-dependent suggestions of actions and a text\nbox for users to type in commands in natural lan-\nguage. ExcelCopilot only works with data tables,\nso its initial suggestion is to convert the active work-\nsheet\u2019s data into a data table. Copilot functions ac-\ntivate when a data table or part of it is selected. It\nthen presents buttons for four top-level tasks: \u201cadd\nformula columns\u201d, \u201chighlight\u201d, \u201csort and filter\u201d, and\n\u201canalyze\u201d. The \u201canalyze\u201d button triggers the copilot\nto display more buttons, e.g., one that generates a\npivot chart from the selected data. ExcelCopilot\ncan also add a formula column to the data table and\nexplain the formula in plain language.\nWhen a user inputs a free-text command, Excel-\nCopilot may communicate its inability to fulfill\nit. This constantly occurs with commands requiring\nmultiple steps, indicating that ExcelCopilot lacks\na planning LLM component as seen in, for example,\nMatrixProduction . This observation, along with\nitsmentionin[44], suggeststhat ExcelCopilot em-\nploys an intent detection-skill routing architecture.\nThis architecture includes an LLM component that\nmaps free-text user commands to potential intents\nand then delegates to other LLM components tasked\nwith generating actions to fulfill those intents. Ac-cordingly, ExcelCopilot comprises several types of\nLLM components:\n\u2022Several distinct Action Executor s generate\ncode for specific application actions, such as cre-\nating a pivot table, designing a worksheet for-\nmula, inserting a diagram, and so on.\n\u2022AnAdvisor suggests meaningful next actions.\nIts outputs serve to derive button captions and\nprompts for ActionExecutor s.\n\u2022When a user inputs a free-text command, the\nIntentDetector is invoked to determine and\ntrigger a suitable ActionExecutor .", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2715, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ccd390b-9691-42ad-9bc2-7a0b19f7decf": {"__data__": {"id_": "4ccd390b-9691-42ad-9bc2-7a0b19f7decf", "embedding": null, "metadata": {"page_label": "9", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "58d6bbdd-8bfa-463c-bc53-94ff46cf55d8", "node_type": "4", "metadata": {"page_label": "9", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "97f2d946240114de02fb782bfd7bae54a0471359f11533fb81f4bc863e8d7e97", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c59406bd-c5c6-4ae4-b778-a99fd0e0b968", "node_type": "1", "metadata": {"page_label": "9", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "e0f35850ff7b6b814a3f04b468a587ec83cb8a763320245df0ec4c0834626dbc", "class_name": "RelatedNodeInfo"}}, "text": "This observation, along with\nitsmentionin[44], suggeststhat ExcelCopilot em-\nploys an intent detection-skill routing architecture.\nThis architecture includes an LLM component that\nmaps free-text user commands to potential intents\nand then delegates to other LLM components tasked\nwith generating actions to fulfill those intents. Ac-cordingly, ExcelCopilot comprises several types of\nLLM components:\n\u2022Several distinct Action Executor s generate\ncode for specific application actions, such as cre-\nating a pivot table, designing a worksheet for-\nmula, inserting a diagram, and so on.\n\u2022AnAdvisor suggests meaningful next actions.\nIts outputs serve to derive button captions and\nprompts for ActionExecutor s.\n\u2022When a user inputs a free-text command, the\nIntentDetector is invoked to determine and\ntrigger a suitable ActionExecutor . The In-\ntentDetector communicates its actions to\nusers and informs them when it cannot devise\na suitable action.\n\u2022TheExplainer generates natural language ex-\nplanations of formulae designed by ExcelCopi-\nlot. It is unclear whether under the hood, the\nActionExecutor is generating both the for-\nmula and the explanation, or if two separate\nLLM components are being invoked. We assume\nthe latter, i.e., that a separate Explainer LLM\ncomponent exists.\nWhile users interact repeatedly with ExcelCopi-\nlot, each interaction adheres to a single-turn pat-\ntern, with the user providing a command and Ex-\ncelCopilot executing it [44].\n5. A Taxonomy for LLM Components and\nLLM-Integrated Applications\nWhen developing the taxonomy, it emerged that an-\nalyzing an LLM-integrated application should begin\nwithidentifyinganddescribingitsdistinctLLMcom-\nponents. Analyzing each LLM component separately\nhelpscapturedetailsandprovidesaclearunderstand-\ning of how the application utilizes LLM capabili-\nties. The LLM-integrated application can then be\ndescribed as a combination of the LLM components\nit employs.\n9", "mimetype": "text/plain", "start_char_idx": 1886, "end_char_idx": 3814, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d17ab9f-8d6c-4b39-bd87-c6b889ac1f63": {"__data__": {"id_": "6d17ab9f-8d6c-4b39-bd87-c6b889ac1f63", "embedding": null, "metadata": {"page_label": "10", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbdc7025-37ff-4a6c-ba6f-b7836b39baeb", "node_type": "4", "metadata": {"page_label": "10", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f500327b64cff72dea513386005bc38a35d5c9c72d17ae435fcf33f9603dfac5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c794646-6242-4374-a191-68a695855511", "node_type": "1", "metadata": {}, "hash": "e80e5d14228d0f761a55ee42e6410483ac1d80e8a192d99f90eee98bba417992", "class_name": "RelatedNodeInfo"}}, "text": "Table 2: Dimensions and characteristics of the taxonomy. Codes of characteristics are printed in uppercase. \u201cMeta\u201d means\n\u201cmetadimension\u201d. \u201cMuEx\u201d means \u201cmutual exclusiveness\u201d.\nMeta Dimension Characteristics MuEx\nInvocation Interaction App,Command,Dialog enforced\nFrequency Single,Iterative yes\nFunction Logic c Alculate,Control yes\nUI none ,Input,Output,Both yes\nData none ,Read,Write,Both yes\nPrompt Instruction none ,User,LLM,Program enforced\nState none ,User,LLM,Program enforced\nTask none ,User,LLM,Program yes\nCheck none ,User,LLM,Program enforced\nSkills re Write,Create,conVerse,Inform,Reason,Planno\nOutput Format FreeText,Item,Code,Structure no\nRevision none ,User,LLM,Program enforced\nConsumer User,LLM,Program,Engine enforced\n5.1. Overview and demonstration\nThe taxonomy identifies 13 dimensions for LLM com-\nponents, grouped into five metadimensions as shown\nin table 2. It comprises both dimensions with gen-\nuinely mutually exclusive characteristics and those\nwith non-exclusive characteristics. For dimensions\nrelated to the technical integration of LLMs within\napplications, mutual exclusiveness is enforced. Given\nthe open nature of software architecture, the inte-\ngration of LLMs allows for significant diversity. In\npractice, LLM components may show multiple char-\nacteristics within these dimensions. Nonetheless, the\ntaxonomy requires categorizing each component with\na predominant characteristic, enforcing a necessary\nlevel of abstraction to effectively organize and struc-\nture the domain.\nWe applied the taxonomy to categorize each of the\nexample instances described in section 4.2. The re-\nsults are depicted in figure 1. The dimensions and\ntheir characteristics are detailed and illustrated with\nexamples in section 5.2.\nThe taxonomy visualizes an LLM component by a\nfeature vector comprising binary as well as multi-\nvalued features. Non-mutually exclusive dimensions\nare represented by a set of binary features. The re-\nmaining dimensions are encoded as n-valued features\nwhere ndenotes the number of characteristics. Forcompactness, we use one-letter codes of the charac-\nteristics as feature values in the visualizations. In\ntable 2, these codes are printed in upper case in the\nrespective characteristic\u2019s name.\nA feature vector representing an LLM component\nis visualized in one line. For dimensions with non-\nmutually exclusive characteristics, all possible codes\nare listed, with the applicable ones marked.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2440, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c794646-6242-4374-a191-68a695855511": {"__data__": {"id_": "1c794646-6242-4374-a191-68a695855511", "embedding": null, "metadata": {"page_label": "10", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bbdc7025-37ff-4a6c-ba6f-b7836b39baeb", "node_type": "4", "metadata": {"page_label": "10", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f500327b64cff72dea513386005bc38a35d5c9c72d17ae435fcf33f9603dfac5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d17ab9f-8d6c-4b39-bd87-c6b889ac1f63", "node_type": "1", "metadata": {"page_label": "10", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "39935026057d93ec7407e5e3958f473bdcd05937057f758434d1fe61cbc882ef", "class_name": "RelatedNodeInfo"}}, "text": "The re-\nsults are depicted in figure 1. The dimensions and\ntheir characteristics are detailed and illustrated with\nexamples in section 5.2.\nThe taxonomy visualizes an LLM component by a\nfeature vector comprising binary as well as multi-\nvalued features. Non-mutually exclusive dimensions\nare represented by a set of binary features. The re-\nmaining dimensions are encoded as n-valued features\nwhere ndenotes the number of characteristics. Forcompactness, we use one-letter codes of the charac-\nteristics as feature values in the visualizations. In\ntable 2, these codes are printed in upper case in the\nrespective characteristic\u2019s name.\nA feature vector representing an LLM component\nis visualized in one line. For dimensions with non-\nmutually exclusive characteristics, all possible codes\nare listed, with the applicable ones marked. The re-\nmaining dimensions are represented by the code of\nthe applicable characteristic, with the characteris-\nticnoneshown as an empty cell. We shade feature\nvalues with different tones to support visual percep-\ntion. LLM components within the same application\nare grouped together, visualizing an LLM-integrating\napplication in a tabular format.\n5.2. Dimensions and characteristics\n5.2.1. Invocation dimensions\nTwoInvocation dimensions address the way the LLM\nis invoked within the application.\nInteraction describes how the user interacts with the\nLLM with three characteristics:\nApp: Users never converse with the LLM directly\nin natural language, rather the application invokes\nthe LLM automatically. E.g., users do not interact\n10", "mimetype": "text/plain", "start_char_idx": 1606, "end_char_idx": 3177, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0bc27897-ba80-4b09-b4f6-d832e0212732": {"__data__": {"id_": "0bc27897-ba80-4b09-b4f6-d832e0212732", "embedding": null, "metadata": {"page_label": "11", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "467a4838-cecb-49c6-99fd-d2346bf16081", "node_type": "4", "metadata": {"page_label": "11", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "27dc5752c9bd5c52d254b62f71448673ac58b5bef65da98a01c31ab9eaee05ee", "class_name": "RelatedNodeInfo"}}, "text": "Invocation Function Prompt Skills Out. Format Output\nz}| { z }| { z }| { z }| { z }| { z }|{Interaction\nFrequency\nLogic\nUI\nData\nInstruction\nState\nTask\nCheck\nreWrite\nCreate\nconVerse\nInform\nReason\nPlan\nFreeText\nItem\nCode\nStructure\nRevision\nConsumer\nHoneycomb QueryAssistant CSA RPPUP P C PE\nLowCode Planning CSA P U I P SUL\nLowCode Executing DIAB PLU CVI F U\nMyGrunchGpt DesignAssistant DIAB PPU V S E\nMyGrunchGpt SettingsEditor CSA PPP W C E\nMyGrunchGpt DomainExpert CSA PPP I F U\nMatrixProduction Manager CSCIPPU I PF S L\nMatrixProduction Operator ASC PPL PF S E\nWorkplaceRobot CSCIPPU P C E\nAutoDroid Executor CICIPLUP P IS E\nAutoDroid MemoryGenerator2AIA PPP R S L\nProgPrompt ActionPlanning CSCIP U P C E\nProgPrompt ScenarioFeedback AIC PPL R I E\nFactoryAssistant DSA PPU W V F U\nSgpTod DstPrompter DSAIRPPU V R C E\nSgpTod PolicyPrompter ASCO PPP R FI P\nTruckPlatoon ASAO PPP W F U\nExcelCopilot ActionExecutor\u2217ASA PPL PF C E\nExcelCopilot Advisor ASA PPP R F S P\nExcelCopilot IntentDetector CSC PPU R IS P\nExcelCopilot Explainer ASA PPP R F U\nFigure 1: Categorized example instances. See table 2 for a legend. \u2217,2: multiple LLM components.\ndirectly with ExcelCopilot ActionExecutor or\nwithMatrixProduction Operator .\nCommand : Users input single natural language\ncommands. E.g., users interact with AutoDroid\nTaskExecutor through single natural language\ncommands.\nDialog: Usersengageinmulti-turndialogueswiththe\nLLM component to achieve a use goal. E.g., users\nrepeatedly prompt LowCode Executing orMy-\nCrunchGpt DesignAssistant in multi-turn dia-logues to obtain an essay or an airfoil design, respec-\ntively.\nFrequency addresses how often the application in-\nvokes a specific LLM component to fulfill a goal:\nSingle: A single invocation of an LLM component\nis sufficient to produce the result. E.g., in My-\nCrunchGpt , the application internally invokes dis-\ntinct LLM components once for each user input by\ninjecting varying prompt instructions.\nIterative: The LLM component is invoked repeatedly\nto produce the result. E.g., AutoDroid TaskEx-\n11", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2050, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cdfb2bb-a0cc-4fd3-97ed-9898da4e8818": {"__data__": {"id_": "2cdfb2bb-a0cc-4fd3-97ed-9898da4e8818", "embedding": null, "metadata": {"page_label": "12", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b8a81b1-f19b-47e0-a793-a861dfc385f0", "node_type": "4", "metadata": {"page_label": "12", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "d9d1c45b95370edcffb5d777f4e301b75ca0b14cfd4e0588f1156a811fefe25e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "81336c0d-695e-4b5b-92de-00cf92731353", "node_type": "1", "metadata": {}, "hash": "dba1ee243c9066864c8446f61fe313c4f4eedb472dc4a12a7f21b182d7995b89", "class_name": "RelatedNodeInfo"}}, "text": "ecutor is invoked multiple times to fulfill a com-\nmand with an updated environment description in\ntheStateprompt; LowCode Executing is repeat-\nedly prompted by the user to achieve the use goal\nwhile the application updates the dialogue history.\n5.2.2. Function dimensions\nTheFunction dimensions are derived from the classi-\ncal three-tier software architecture model which seg-\nregates an application into three distinct layers: pre-\nsentation, logic and data [17]. The presentation layer\nimplements the UI. On the input side, it allows users\nto enter data and commands that control the appli-\ncation. On the output side, it presents information\nandprovidesfeedbackontheexecutionofcommands.\nThe logic layer holds the code that directly realizes\nthe core objectives and processes of an application\nsuch as processing data, performing calculations, and\nmaking decisions. The data layer of an application\nmanages the reading and writing of data from and\nto persistent data storage. Due to its versatility, an\nLLM component can simultaneously implement func-\ntionality for all three layers. The taxonomy addresses\nthis with three Function dimensions.\nUIindicateswhetheranLLMcomponentcontributes\nsignificantly to the user interface of an application,\navoiding the need to implement graphical UI controls\nor display elements:\nnone: No UI functionality is realized by the LLM.\nE.g., in ExcelCopilot , the LLM does not replace\nany UI elements.\nInput: Input UI is (partially) implemented by\nthe LLM. E.g., in MatrixProduction Manager ,\nusers input their order in natural language, obviating\na product configuration GUI.\nOutput: Output UI is (partially) implemented by the\nLLM. E.g., in TruckPlatoon , the output gener-\nated by the LLM component can replace a data cock-\npit with gauges and other visuals displaying numeri-\ncal data.\nBoth: Input and output UI are (partially) imple-\nmented by the LLM. E.g., in MyCrunchGpt , the\nDesignAssistant provides a convenient conversa-\ntional interface for parameterization of APIs andtools and feedback on missing values, which other-\nwise might require a complex GUI.\nLogicindicates whether the LLM component deter-\nmines the control flow of the application. It discerns\ntwo characteristics:\ncAlculate : The output does not significantly impact\nthe control flow of the application, i.e., the output\nis processed like data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2356, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "81336c0d-695e-4b5b-92de-00cf92731353": {"__data__": {"id_": "81336c0d-695e-4b5b-92de-00cf92731353", "embedding": null, "metadata": {"page_label": "12", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6b8a81b1-f19b-47e0-a793-a861dfc385f0", "node_type": "4", "metadata": {"page_label": "12", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "d9d1c45b95370edcffb5d777f4e301b75ca0b14cfd4e0588f1156a811fefe25e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cdfb2bb-a0cc-4fd3-97ed-9898da4e8818", "node_type": "1", "metadata": {"page_label": "12", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "c1dcd00df376de9ebde39fa4ceaa7f881576ad604e4db6e744b3d72d2419b2c0", "class_name": "RelatedNodeInfo"}}, "text": "Output: Output UI is (partially) implemented by the\nLLM. E.g., in TruckPlatoon , the output gener-\nated by the LLM component can replace a data cock-\npit with gauges and other visuals displaying numeri-\ncal data.\nBoth: Input and output UI are (partially) imple-\nmented by the LLM. E.g., in MyCrunchGpt , the\nDesignAssistant provides a convenient conversa-\ntional interface for parameterization of APIs andtools and feedback on missing values, which other-\nwise might require a complex GUI.\nLogicindicates whether the LLM component deter-\nmines the control flow of the application. It discerns\ntwo characteristics:\ncAlculate : The output does not significantly impact\nthe control flow of the application, i.e., the output\nis processed like data. E.g., MyCrunchGpt Set-\ntingsEditor modifies a JSON file, replacing a pro-\ngrammed function; MyCrunchGpt DesignAssis-\ntantasks the user for parameters, but the sequence\nof calling APIs and tools follows a predefined work-\nflow; the workflow computed by LowCode Plan-\nningis displayed without influencing the applica-\ntion\u2019s control flow.\nControl: The output of the LLM is used for con-\ntrolling the application. E.g., the plans generated\nbyMatrixProduction Manager serve to sched-\nule and activate production modules; the actions pro-\nposed by AutoDroid TaskExecutor are actually\nexecuted and determine how the control flow of the\napp proceeds.\nSince an LLM invocation always computes a result,\ncAlculate is interpreted as \u201ccalculate only\u201d, making\ncAlculate andControlmutually exclusive.\nDataaddresseswhethertheLLMcontributestoread-\ning or writing persistent data:\nnone: The LLM does not contribute to reading or\nwriting persistent data. This characteristic applies\nto most sample instances.\nRead: TheLLMisappliedforreadingfrompersistent\ndata store. E.g., SgpTod DstPrompter generates\nSQL queries which the application executes; Honey-\ncomb QueryAssistant devises analytical database\nqueries.\nWriteandBoth: No LLM component among the\nsamples generates database queries for creating or\nupdating persistent data.\n5.2.3. Prompt-related dimensions\nIntegrating an LLM into an application poses spe-\ncific requirements for prompts, such as the need for\nprompts to reliably elicit output in the requested\n12", "mimetype": "text/plain", "start_char_idx": 1612, "end_char_idx": 3856, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d123715-4e2f-4773-8da1-dfd49ac9ce9d": {"__data__": {"id_": "9d123715-4e2f-4773-8da1-dfd49ac9ce9d", "embedding": null, "metadata": {"page_label": "13", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7272ec5-df29-4ab4-8d06-2c9c7eb2b0e4", "node_type": "4", "metadata": {"page_label": "13", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "a8ac600d4c54dae7e58304fa5fe17fca5544d33091bdeb9e60f35e0c26721cda", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17e168f0-d13f-4485-8ef8-909e6e370e8b", "node_type": "1", "metadata": {}, "hash": "b882235cbd35e61dd0385519bd4b44e9ec6f8b7003ee494f07311d3d2e359f48", "class_name": "RelatedNodeInfo"}}, "text": "form [68]. While a broad range of prompt patterns\nhave been identified and investigated [66], there is\nstill a lack of research on successful prompt pat-\nterns specifically for LLM-integrated applications, on\nwhichthistaxonomycouldbuild. Developingprompt\ntaxonomiesisachallengingresearchendeavorinitself\n[49] and is beyond the scope of this research. There-\nfore, the taxonomy does not define a dimension with\nspecificpromptpatternsascharacteristics, butrather\nfocuses on how the application generates the prompt\nfor an LLM component from a technical perspective.\nPrompts generally consist of several parts with dis-\ntinct purposes, generated by different mechanisms.\nAlthough many authors explore the concepts, a com-\nmon terminology has yet to be established. This is\nillustrated in table 3, showing terms from an ad-hoc\nselection of recent papers addressing prompt gener-\nation in applications. In the table, italics indicate\nthat the authors refrain from introducing an abstract\nterm and instead use a domain-specific description.\nThe term \u201cexamples\u201d indicates a one-shot orfew-shot\nprompt pattern. The terms that are adopted for the\ntaxonomy are underlined.\nThe taxonomy distinguishes three prompt parts re-\nferred to as Prompt Instruction ,Prompt State , and\nPrompt Task . These parts can occur in any order,\npotentially interleaved, and some parts may be ab-\nsent.\n\u2022Instruction is the part of a prompt that outlines\nhow to solve the task. Defined during LLM com-\nponent development, it remains static through-\nout an application\u2019s lifespan.\n\u2022Stateis the situation-dependent part of the\nprompt that is created dynamically every time\nthe LLM is invoked. The taxonomy opts for the\ntermStateinstead of \u201ccontext\u201d in order to avoid\nconfusion with the \u201cLLM context\u201d as explained\nin section 2. The Statemay include the current\ndialogue history, an extract of a knowledge base\nneeded specifically for the current LLM invoca-\ntion, or a state or scene description, etc.\n\u2022Taskis the part of the prompt conveying the\ntask to solve in a specific invocation.Prompt Instruction ,StateandTaskdescribe the ori-\ngins of the prompt parts by uniform characteristics:\nnone: The prompt part is not present. E.g., Prog-\nPrompt ActionPlanning has noStateprompt,\nnor does LowCode Planning (except the dialogue\nhistory when planning a subprocess). Instruction\nandTaskprompt parts are present in all sample in-\nstances.\nUser: The user phrases the prompt part. E.g., the\nTaskforExcelCopilot IntentDetector or for\nLowCode Planning is phrased by the user.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2532, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17e168f0-d13f-4485-8ef8-909e6e370e8b": {"__data__": {"id_": "17e168f0-d13f-4485-8ef8-909e6e370e8b", "embedding": null, "metadata": {"page_label": "13", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c7272ec5-df29-4ab4-8d06-2c9c7eb2b0e4", "node_type": "4", "metadata": {"page_label": "13", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "a8ac600d4c54dae7e58304fa5fe17fca5544d33091bdeb9e60f35e0c26721cda", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d123715-4e2f-4773-8da1-dfd49ac9ce9d", "node_type": "1", "metadata": {"page_label": "13", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "7218670218c48335cb89a824da29cbd81a2128c49329f29e55b95c62ec06c431", "class_name": "RelatedNodeInfo"}}, "text": "The Statemay include the current\ndialogue history, an extract of a knowledge base\nneeded specifically for the current LLM invoca-\ntion, or a state or scene description, etc.\n\u2022Taskis the part of the prompt conveying the\ntask to solve in a specific invocation.Prompt Instruction ,StateandTaskdescribe the ori-\ngins of the prompt parts by uniform characteristics:\nnone: The prompt part is not present. E.g., Prog-\nPrompt ActionPlanning has noStateprompt,\nnor does LowCode Planning (except the dialogue\nhistory when planning a subprocess). Instruction\nandTaskprompt parts are present in all sample in-\nstances.\nUser: The user phrases the prompt part. E.g., the\nTaskforExcelCopilot IntentDetector or for\nLowCode Planning is phrased by the user. There\nare no sample instances where the user provides the\nInstruction orStateprompt parts.\nLLM:ThepromptpartisgeneratedbyanLLM.E.g.,\nLowCode Planning generates the StateforLow-\nCode Executing andExcelCopilot IntentDe-\ntector generates the TaskforExcelCopilot Ac-\ntionExecutor s.\nProgram: Application code generates the prompt\npart. E.g., AutoDroid programmatically generates\ntheStateand theTaskparts for its MemoryGen-\nerators in the knowledge base building phase.\nThePrompt Instruction dimension is always gener-\nated byProgram. While a user and possibly an LLM\nhave defined this prompt part during application de-\nvelopment, this falls outside the scope of this taxon-\nomy. Therefore, the Prompt Instruction dimension is\nnot discriminating and categorizes all cases as Pro-\ngram. Itisretainedinthetaxonomyforcompleteness\nand better understandability.\nPrompt Check describes whether the application em-\nploys a review mechanism to control and modify the\nprompt before invoking the LLM. The same charac-\nteristics as for the prompt parts are applicable:\nnone: The prompt is used without check.\nUser: The user checks and revises the prompt.\nLLM: Another LLM component checks or revises the\nprompt.\nProgram: The application comprises code to check\nor revise the prompt. E.g., AutoDroid removes\npersonal data, such as names, to ensure privacy\nbefore invoking the TaskExecutor ;Honeycomb\nQueryAssistant incorporates a coded mechanism\nagainst prompt injection attacks.\n13", "mimetype": "text/plain", "start_char_idx": 1793, "end_char_idx": 3999, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "79610271-d7c6-4c37-bcd3-f9faf4e247df": {"__data__": {"id_": "79610271-d7c6-4c37-bcd3-f9faf4e247df", "embedding": null, "metadata": {"page_label": "14", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fca5d7a2-bbb4-4dfd-bef0-700a3d2ba6a1", "node_type": "4", "metadata": {"page_label": "14", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "6748e160fe88ef61ce4105a906aabf90c21c53f06a6ddfdc2229dc83c7cf5692", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ab51abcf-a3b3-4894-b593-25f2884cb85a", "node_type": "1", "metadata": {}, "hash": "ef1f327d53925e1633dd4b8466b84bb38c1ce3b8b470dff423523da99df9a003", "class_name": "RelatedNodeInfo"}}, "text": "Table 3: Terms used for prompt parts. Expressions specific to a domain are printed in italics, \u201cexamples\u201d indicates a one-shot\norfew-shot prompt pattern. Terms adopted for the taxonomy are underlined.\nSource Instruction State Task\n[72] task description + examples test instance\n[34] instruction prompt data prompt\n[32] predefined prompt user prompt\n[45] prompt template + examples DB schema user input question\n[45] examples SQL query result\n[37] prompt context, i.e., examples environment state , scene\ndescriptioninput task commands\n[5] education prompt dialogue history user input task prompt\n[5] education prompt dialogue history + provided\nworkflow(circumscribed)\n[69] role and goal + instruction + examples context current task\n[26] predefined system instruction +\ndomain-specific informationquery results from\nknowledge graphthe user\u2019s request\nMost example instances omit prompt checks. There\nare no examples where a Checkis performed by a\nUseror anLLM.\n5.2.4. Skills dimensions\nTheSkillsdimension captures the types of LLM ca-\npabilities that an application utilizes. It is designed\nas a dimension with six non-mutually exclusive char-\nacteristics.\nSkillsis decomposed into six specific capabilities:\nreWrite: The LLM edits or transforms data or\ntext, such as rephrasing, summarizing, reformat-\nting, correcting, or replacing values. E.g., My-\nCrunchGpt SettingsEditor replaces values in\nJSON files; TruckPlatoon converts measurements\ninto textual explanations.\nCreate: The LLM generates novel output. E.g.,\nLowCode Executing generates substantial bodies\nof text for tasks like essay writing.\nconVerse : The application relies on the LLM\u2019s capa-\nbility to engage in purposeful dialogues with humans.\nE.g.,MyCrunchGpt DesignAssistant asks users\nfor missing parameters; SgpTod PolicyPrompter\ndecides how to react to user inputs and formulates\nchatbot responses.Inform: The application depends on knowledge that\nthe LLM has acquired during its training, unlike\napplications that provide all necessary information\nwithin the prompt. E.g., MyCrunchGpt Domain-\nExpert providesexpertknowledgeonairfoildesigns;\nMatrixProduction relies on built-in knowledge of\nproduction processes, such as \u201ca hole is produced\nby drilling\u201d; LowCode Executing uses its learned\nknowledge for tasks like essay writing.\nReason: The LLM draws conclusions or makes log-\nical inferences. E.g., FormulaExplainer inEx-\ncelCopilot explains the effects of Excel functions\nin formulas; AutoDroid MemoryGenerator s ex-\nplain the effects of GUI elements in Android apps.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2539, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ab51abcf-a3b3-4894-b593-25f2884cb85a": {"__data__": {"id_": "ab51abcf-a3b3-4894-b593-25f2884cb85a", "embedding": null, "metadata": {"page_label": "14", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fca5d7a2-bbb4-4dfd-bef0-700a3d2ba6a1", "node_type": "4", "metadata": {"page_label": "14", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "6748e160fe88ef61ce4105a906aabf90c21c53f06a6ddfdc2229dc83c7cf5692", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "79610271-d7c6-4c37-bcd3-f9faf4e247df", "node_type": "1", "metadata": {"page_label": "14", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "fcae906a7175b09c62b52076e16c3999186745bf0ec973bd8683f928f0b0702a", "class_name": "RelatedNodeInfo"}}, "text": "E.g.,MyCrunchGpt DesignAssistant asks users\nfor missing parameters; SgpTod PolicyPrompter\ndecides how to react to user inputs and formulates\nchatbot responses.Inform: The application depends on knowledge that\nthe LLM has acquired during its training, unlike\napplications that provide all necessary information\nwithin the prompt. E.g., MyCrunchGpt Domain-\nExpert providesexpertknowledgeonairfoildesigns;\nMatrixProduction relies on built-in knowledge of\nproduction processes, such as \u201ca hole is produced\nby drilling\u201d; LowCode Executing uses its learned\nknowledge for tasks like essay writing.\nReason: The LLM draws conclusions or makes log-\nical inferences. E.g., FormulaExplainer inEx-\ncelCopilot explains the effects of Excel functions\nin formulas; AutoDroid MemoryGenerator s ex-\nplain the effects of GUI elements in Android apps.\nPlan: The LLM designs a detailed method or course\nof action to achieve a specific goal. E.g., Au-\ntoDroid TaskExecutor andWorkplaceRobot\nTaskPlanning devise action plans to achieve goals.\nThePlanandReasoncharacteristics are interrelated,\nas planning also requires reasoning. The intended\nhandling of these characteristics is to categorize an\nLLM component as Planonly and understand Plan\nas implicitly subsuming Reason.\nThe effectiveness of LLMs as components of software\napplications relies on their commonsense knowledge\nand their ability to correctly interpret and handle a\nbroad variety of text inputs, including instructions,\n14", "mimetype": "text/plain", "start_char_idx": 1708, "end_char_idx": 3173, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e166a46f-54c3-4ccb-8bed-dfc7751cc7cc": {"__data__": {"id_": "e166a46f-54c3-4ccb-8bed-dfc7751cc7cc", "embedding": null, "metadata": {"page_label": "15", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1771a44-1094-4ad0-88d2-a5945fcd8f3a", "node_type": "4", "metadata": {"page_label": "15", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "1248a81f433f24f04163c040c3b25830bda1b8e747a3b9a997a634d48dbe0c47", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "128e4d6b-cd7f-44d4-8d27-bd28b03ce14e", "node_type": "1", "metadata": {}, "hash": "a6c4105d23ccbffe95a417106f0f6c6348c7a9553a4ed933e962c34733ae2504", "class_name": "RelatedNodeInfo"}}, "text": "examples, and code. It is reasonable to assume that a\nfundamental capability, which might be termed Un-\nterstand, is leveraged by every LLM component. As\nit is not distinctive, the taxonomy does not list it\nexplicitly in the Skillsdimension.\nApplying this taxonomy dimension requires users to\ndetermine which skills are most relevant and worth\nhighlighting in an LLM component. Given the versa-\ntilityofLLMs, reducingthefocustofewpredominant\nskills is necessary to make categorizations distinctive\nand expressive.\n5.2.5. Output-related dimensions\nOutput Format characterizestheformatoftheLLM\u2019s\noutput. As an output may consist of several parts in\ndiverse formats, this dimension is designed as non-\nmutually exclusive, same as the Skillsdimension. It\ndistinguishes four characteristics that are distinctive\nand well discernible:\nFreeText : unstructured natural language text out-\nput. E.g., TruckPlatoon andMyCrunchGpt\nDomainExpert generate text output in natural lan-\nguage; MatrixProduction Manager andMa-\ntrixProduction Operator produceFreeText ex-\nplanations complementing output in custom formats\nto be parsed by the application.\nItem: a single text item from a predefined set of\nitems, such as a class in a classification task. E.g.,\nProgPrompt ScenarioFeedback outputs either\nTrueorFalse.\nCode: source code or other highly formalized output\nthat the LLM has learned during its training, such\nas a programming language, XML, or JSON. E.g.,\nAutoDroid TaskExecutor producescodetosteer\nan Android app; MyCrunchGpt SettingsEditor\noutputs JSON.\nStructure : structured, formalized output adhering to\na custom format. E.g., LowCode Planning out-\nputs text in a format that can be displayed as a flow\nchart; MatrixProduction Manager andOper-\natorproduce output in custom formats combined\nwithFreeText explanations.\nOutput Revision indicates whether the application\nchecks or revises the LLM-generated output beforeutilization. These characteristics and their interpre-\ntations mirror those in the Prompt Check dimension:\nnone: There is no revision of the LLM output.\nUser: The user revises the LLM output. E.g.,\nthe user improves the plan generated by LowCode\nPlanning .\nLLM: A further LLM component checks or revises\nthe output of the LLM component under considera-\ntion.\nProgram: Programmed code checks or revises the\nLLM output. E.g., Honeycomb QueryAssistant\ncorrects the query produced by the LLM before exe-\ncuting it [7].", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2426, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "128e4d6b-cd7f-44d4-8d27-bd28b03ce14e": {"__data__": {"id_": "128e4d6b-cd7f-44d4-8d27-bd28b03ce14e", "embedding": null, "metadata": {"page_label": "15", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e1771a44-1094-4ad0-88d2-a5945fcd8f3a", "node_type": "4", "metadata": {"page_label": "15", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "1248a81f433f24f04163c040c3b25830bda1b8e747a3b9a997a634d48dbe0c47", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e166a46f-54c3-4ccb-8bed-dfc7751cc7cc", "node_type": "1", "metadata": {"page_label": "15", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "245302d2dedca82f48c8ca3fe8e6659fe29a0f174a41c20f5717ec931fc14f56", "class_name": "RelatedNodeInfo"}}, "text": "E.g., LowCode Planning out-\nputs text in a format that can be displayed as a flow\nchart; MatrixProduction Manager andOper-\natorproduce output in custom formats combined\nwithFreeText explanations.\nOutput Revision indicates whether the application\nchecks or revises the LLM-generated output beforeutilization. These characteristics and their interpre-\ntations mirror those in the Prompt Check dimension:\nnone: There is no revision of the LLM output.\nUser: The user revises the LLM output. E.g.,\nthe user improves the plan generated by LowCode\nPlanning .\nLLM: A further LLM component checks or revises\nthe output of the LLM component under considera-\ntion.\nProgram: Programmed code checks or revises the\nLLM output. E.g., Honeycomb QueryAssistant\ncorrects the query produced by the LLM before exe-\ncuting it [7].\nThere are no instances in the sample set where an-\nother LLM revises or checks the output of the LLM.\nMost sample applications do not check or revise the\nLLM\u2019s output, though several of them parse and\ntransform it. The purpose of the Output Revision\ndimension is to indicate whether the application in-\ncludes control or correction mechanisms, rather than\njust parsing it.\nOutput Consumer addresses the way of utilizing the\nLLM output:\nUsersignifies that the LLM output is presented to\na human user. E.g., the text output of TruckPla-\ntoonis intended for humans, as well as the output\nofMyCrunchGPT DomainExpert .\nLLMindicates that the output serves as a prompt\npart in a further LLM invocation. E.g., the knowl-\nedgebaseentriesgeneratedbyan AutoDroid Mem-\noryGenerator become part of the prompt for\nAutoDroid TaskExecutor ; the plan output by\nLowCode Planning serves as a part of the prompt\nforLowCode Executing .\nProgram describes instances where the LLM output\nisconsumedandprocessedfurtherbyasoftwarecom-\nponent of the application. E.g., the output of Ma-\ntrixProduction Manager is handled by software\nsystems (including a Manufacturing Execution Sys-\ntem) which use it to compute prompts for other LLM\ncomponents.\nEnginecovers scenarios where the LLM output is in-\ntended for execution on a runtime engine. E.g., the\nSQL query generated by SgpTod DstPrompter is\n15", "mimetype": "text/plain", "start_char_idx": 1617, "end_char_idx": 3796, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "65aacc9b-8601-426d-ba08-bc434e5fb7a5": {"__data__": {"id_": "65aacc9b-8601-426d-ba08-bc434e5fb7a5", "embedding": null, "metadata": {"page_label": "16", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "375789b9-0c2b-4149-aee3-c5e175842371", "node_type": "4", "metadata": {"page_label": "16", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "5198aee4b1f9164724c74e8b6dcbbde8e700e4bac529562f24edc959b5f63497", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9cf76075-ec57-42f4-989f-b141ab091086", "node_type": "1", "metadata": {}, "hash": "0f02683d5f09d6b80446ea733ea1a3197406486e56d14cb9dd4131b636a9141b", "class_name": "RelatedNodeInfo"}}, "text": "processed by a SQL interpreter; a part of the output\nofMatrixProduction Operator is executed by\nautomation modules.\nAlthough applications may parse and transform the\nLLM output before use, the Output Consumer di-\nmension is meant to identify the ultimate consumer,\nsuch as an execution engine, rather than an interme-\ndiary parser or transformation code. When applica-\ntions divide the LLM output into parts for different\nconsumers, users applying the taxonomy need to de-\ntermine which consumer is most relevant, since this\ndimension is designed to be mutually exclusive.\n5.3. Evaluation\nFigure 2 displays the number of occurrences of char-\nacteristics within the example instances. It must\nbe noted, however, that these do not reflect actual\nfrequencies, as similar LLM components within the\nsame application are aggregated together, indicated\nby symbols \u2217and 2in figure 1. Furthermore, Ex-\ncelCopilot likely includes occurrences of Prompt\nCheckandOutput Revision which are not counted\ndue to insufficient system documentation.\nWe evaluate the taxonomy against commonly ac-\ncepted quality criteria: comprehensiveness, robust-\nness, conciseness, mutual exclusiveness, explanatory\npower, and extensibility [58, 42]. The taxonomy\nencompasses all example instances including those\nthat were not considered during its development.\nThisdemonstrates comprehensiveness . Asfigure1\nshows, all example instances have unique categoriza-\ntions, supporting the taxonomy\u2019s robustness . This\nnot only indicates that the dimensions and charac-\nteristics are distinctive for the domain, but also high-\nlightsthewidevarietypossibleinthisfield. Concise-\nnessdemands that the taxonomy uses the minimum\nnumber of dimensions and characteristics. The tax-\nonomy gains conciseness by identifying relatively few\nand abstract characteristics within each dimension.\nHowever, it does not adhere to the related subcri-\nterion that each characteristic must be present in at\nleastoneinvestigatedinstance[54]. Unoccupiedchar-\nacteristics are retained for dimensions whose char-\nacteristics were derived conceptually, specifically, forthePromptdimensions, the Output Revision dimen-\nsion, and the Data Function dimension, enhancing\nthe taxonomy\u2019s ability to illustrate design options\nand inspire novel uses for LLM integrations in ap-\nplications. Some dimensions are constructed in par-\nallel, sharing common sets of characteristics. While\nthis affects conciseness, it makes the taxonomy easier\nto understand and apply. As is often seen in tax-\nonomy development [54], we deliberately waived the\nrequirement for mutual exclusiveness for some di-\nmensions, specifically the Output Format andSkills\ndimensions.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2677, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cf76075-ec57-42f4-989f-b141ab091086": {"__data__": {"id_": "9cf76075-ec57-42f4-989f-b141ab091086", "embedding": null, "metadata": {"page_label": "16", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "375789b9-0c2b-4149-aee3-c5e175842371", "node_type": "4", "metadata": {"page_label": "16", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "5198aee4b1f9164724c74e8b6dcbbde8e700e4bac529562f24edc959b5f63497", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "65aacc9b-8601-426d-ba08-bc434e5fb7a5", "node_type": "1", "metadata": {"page_label": "16", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2578941f9112a8454aa96ae5acfbab27ba658dbb6a9c4de256936e6f4297babe", "class_name": "RelatedNodeInfo"}}, "text": "The tax-\nonomy gains conciseness by identifying relatively few\nand abstract characteristics within each dimension.\nHowever, it does not adhere to the related subcri-\nterion that each characteristic must be present in at\nleastoneinvestigatedinstance[54]. Unoccupiedchar-\nacteristics are retained for dimensions whose char-\nacteristics were derived conceptually, specifically, forthePromptdimensions, the Output Revision dimen-\nsion, and the Data Function dimension, enhancing\nthe taxonomy\u2019s ability to illustrate design options\nand inspire novel uses for LLM integrations in ap-\nplications. Some dimensions are constructed in par-\nallel, sharing common sets of characteristics. While\nthis affects conciseness, it makes the taxonomy easier\nto understand and apply. As is often seen in tax-\nonomy development [54], we deliberately waived the\nrequirement for mutual exclusiveness for some di-\nmensions, specifically the Output Format andSkills\ndimensions. In the context of this taxonomy, these\ncan equivalently be understood as a set of of six\nand four binary dimensions respectively, each divided\ninto characteristics \u201cyes\u201d and \u201cno\u201d. However, framing\nthem as a single dimension with non-mutually exclu-\nsive characteristics seems more intuitive.\nMetadimensions structure the taxonomy, and most\nof the characteristics are illustrated through exam-\nples. These measures are recognized for enhancing\ntheexplanatory power of a taxonomy [58]. The\ntaxonomy\u2019s flat structure allows for the easy addition\nof dimensions and characteristics, indicating that its\nextensibility is good. Potential extensions and fur-\nther aspects of the taxonomy, including its usefulness\nand ease of use, are discussed in section 6.\nWe visualize the taxonomy (or, strictly speaking, cat-\negorized instances) in a compact form using feature\nvectors with characteristics abbreviated to single-\nletter codes. This approach has a drawback, as\nit requires referencing a legend. Additionally, non-\napplicable characteristics in mutually exclusive di-\nmensions are not visible, which means the design\nspace is not completely shown. However, the com-\npactness of the representation allows LLM compo-\nnents within a common application to be grouped\nclosely, so that an LLM-integrated application can\nbe perceived as a unit without appearing convoluted.\nThis is a significant advantage for our purposes.\n6. Discussion\nThe discussion first focuses on the taxonomy\u2019s appli-\ncability and ease of use before considering its overall\nusefulness.\n16", "mimetype": "text/plain", "start_char_idx": 1726, "end_char_idx": 4228, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b19723f-e380-4adf-9df5-9d9c2aab9f39": {"__data__": {"id_": "0b19723f-e380-4adf-9df5-9d9c2aab9f39", "embedding": null, "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76424085-4c00-4cbc-8945-0bc3b4b717f8", "node_type": "4", "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f1c0844eb0fda46f26abe5a1be035790367df59b2fef296a8a08f1211c8626e4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "23a65271-ec8c-4ddc-bc04-d8ff89f1e29f", "node_type": "1", "metadata": {}, "hash": "0df996f1ca3da84a5a4bd9d1e28a0da3036236be477fafdf43a2858bf08bc340", "class_name": "RelatedNodeInfo"}}, "text": "Invocation Function Prompt Output Output\nz}| { z }| { z }| { Skills Format z }| {\nInter. Freq. Logic UI Data Instr. State Task Check z }| { z }|{Revision Consumer\nA C D I SC AI O BR W B U L P U L P U L P U L PW C V I R P F I C S U L P U L P E\n8 9 4 5 168 135 2 2 2 0 0 0 0 21 0 2 1711 3 7 0 0 2 3 1 4 4 7 8 10 4 6 8 1 0 1 5 3 3 10\nFigure 2: Occurrences of characteristics in the sample set of LLM-integrated applications.\n6.1. Applicability and ease of use\nThe taxonomy was effectively applied to LLM-\nintegrated applications based on research papers,\nsource code blog posts, recorded software demonstra-\ntions, and developer experiences. The analysis of\nLowCode revealed it to be a prompt definition tool\ncombined with an LLM-based chatbot, which devi-\nates from the strict definition of an LLM-integrated\napplication. Still, the taxonomy provided an effective\ncategorization and led to a clear understanding of the\nsystem\u2019s architecture.\nObviously, the ease of categorization depends on the\nclarity and comprehensiveness of the available infor-\nmation, which varies across analyzed systems. An-\nalyzing applications of LLMs in novel and uncom-\nmon domains can be challenging. While these papers\npresent inspiring and innovative ideas for LLM inte-\ngration, such as MyCrunchGpt andTruckPla-\ntoon, they may prioritize explaining the application\nareaandstruggletodetailthetechnicalaspectsofthe\nLLM integration. A taxonomy for LLM-integrated\napplications can guide and facilitate the writing pro-\ncess and lead to more standardized and comparable\ndescriptions.\nApplying the taxonomy is often more straightforward\nfor research-focused systems. Omitting the com-\nplexities required for real-world applications, such as\nprompt checks and output revisions, their architec-\ntures are simpler and easier to describe. A taxonomy\ncan point out such omissions.\nA fundamental challenge in applying the taxonomy\narises from the inherent versatility of LLMs, which\nallows to define LLM components serving multiple\npurposes.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2009, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "23a65271-ec8c-4ddc-bc04-d8ff89f1e29f": {"__data__": {"id_": "23a65271-ec8c-4ddc-bc04-d8ff89f1e29f", "embedding": null, "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76424085-4c00-4cbc-8945-0bc3b4b717f8", "node_type": "4", "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f1c0844eb0fda46f26abe5a1be035790367df59b2fef296a8a08f1211c8626e4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b19723f-e380-4adf-9df5-9d9c2aab9f39", "node_type": "1", "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "57ccc84597612287459ad4b061999133c6d1df7431e795796824f776ea741647", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59e74fa8-9519-40fe-99b2-faadb4fd3e5e", "node_type": "1", "metadata": {}, "hash": "6692ac384981a1eef3598e1d259446aa7c4ad90b6c0c0221aa4b8e4bd6d2cebf", "class_name": "RelatedNodeInfo"}}, "text": "While these papers\npresent inspiring and innovative ideas for LLM inte-\ngration, such as MyCrunchGpt andTruckPla-\ntoon, they may prioritize explaining the application\nareaandstruggletodetailthetechnicalaspectsofthe\nLLM integration. A taxonomy for LLM-integrated\napplications can guide and facilitate the writing pro-\ncess and lead to more standardized and comparable\ndescriptions.\nApplying the taxonomy is often more straightforward\nfor research-focused systems. Omitting the com-\nplexities required for real-world applications, such as\nprompt checks and output revisions, their architec-\ntures are simpler and easier to describe. A taxonomy\ncan point out such omissions.\nA fundamental challenge in applying the taxonomy\narises from the inherent versatility of LLMs, which\nallows to define LLM components serving multiple\npurposes. This is exemplified by SgpTod Poli-cyPrompter , where the prompt is designed to pro-\nduce a structure with two distinct outcomes (a class\nlabel and a chatbot response), and similarly by Ma-\ntrixProduction , as detailed section 4.2. Draw-\ning an analogy to \u201cfunction overloading\u201d in classical\nprogramming, such LLM components can be termed\n\u201coverloaded LLM components\u201d.\nA taxonomy can handle overloaded LLM components\nin several ways: (1) define more dimensions as non-\nmutually exclusive, (2) label overloaded LLM compo-\nnents as\u201coverloaded\u201d withoutamoredetailedcatego-\nrization, or (3) categorize them by their predominant\npurpose or output. While the first approach allows\nfor the most precise categorization, it complicates the\ntaxonomy. Moreover, it will likely result in nearly all\ncharacteristics being marked for some LLM compo-\nnents, which is ultimately not helpful. The second\napproachsimplifiescategorizationbutsacrificesmuch\ndetail. Our taxonomy adopts the third approach, en-\nforcing simplification and abstraction in descriptions\nof overloaded LLM components while retaining es-\nsential detail. The taxonomy can easily be extended\nto include approach (2) as an additional binary di-\nmension.\n6.2. Usefulness\nThe search for instances of LLM-integrated appli-\ncations uncovered activities across various domains.\nSubstantial research involving LLM integrations, of-\nten driven by theoretical interests, is notable in robot\ntask planning [37, 51, 61, 33, 63] and in the TOD\nfield [23, 71, 4, 6, 56].", "mimetype": "text/plain", "start_char_idx": 1178, "end_char_idx": 3519, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59e74fa8-9519-40fe-99b2-faadb4fd3e5e": {"__data__": {"id_": "59e74fa8-9519-40fe-99b2-faadb4fd3e5e", "embedding": null, "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "76424085-4c00-4cbc-8945-0bc3b4b717f8", "node_type": "4", "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f1c0844eb0fda46f26abe5a1be035790367df59b2fef296a8a08f1211c8626e4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "23a65271-ec8c-4ddc-bc04-d8ff89f1e29f", "node_type": "1", "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "7fbd5905c93a6479f61de4ec2a120e8503c76aaccdf96e29bb0895abfe8ee3cc", "class_name": "RelatedNodeInfo"}}, "text": "Moreover, it will likely result in nearly all\ncharacteristics being marked for some LLM compo-\nnents, which is ultimately not helpful. The second\napproachsimplifiescategorizationbutsacrificesmuch\ndetail. Our taxonomy adopts the third approach, en-\nforcing simplification and abstraction in descriptions\nof overloaded LLM components while retaining es-\nsential detail. The taxonomy can easily be extended\nto include approach (2) as an additional binary di-\nmension.\n6.2. Usefulness\nThe search for instances of LLM-integrated appli-\ncations uncovered activities across various domains.\nSubstantial research involving LLM integrations, of-\nten driven by theoretical interests, is notable in robot\ntask planning [37, 51, 61, 33, 63] and in the TOD\nfield [23, 71, 4, 6, 56]. Research exploring LLM po-\ntentials from a more practical perspective can be\nfound in novel domains, such as industrial produc-\ntion [69, 26] and other technical areas [28, 70]. Fur-\n17", "mimetype": "text/plain", "start_char_idx": 2750, "end_char_idx": 3705, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d46ccd2-0ca3-4a4f-8aa5-2747f8e7fa8a": {"__data__": {"id_": "0d46ccd2-0ca3-4a4f-8aa5-2747f8e7fa8a", "embedding": null, "metadata": {"page_label": "18", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77b25a03-dc3a-4abf-9b61-b485ac5e4813", "node_type": "4", "metadata": {"page_label": "18", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "59deeccf9bcf9e562d20a80afefd573054a8078ab08bd155a1264e122300a190", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "78a41651-ec9f-4053-adc1-b592e00c44d5", "node_type": "1", "metadata": {}, "hash": "fb120022145d00217d1bec44840e137a87a27bdaca1bdd7851c8889d8430c59f", "class_name": "RelatedNodeInfo"}}, "text": "thermore, developers of commercial LLM-based ap-\nplications are beginning to communicate their efforts\nand challenges [44, 7]. The taxonomy has been ap-\nplied to example instances from these and additional\nareas. This demonstrates its potential as a common,\nunified framework for describing LLM-integrated ap-\nplications, facilitating the comparison and sharing\nof development knowledge between researchers and\npractitioners across various domains.\nWhen applying the taxonomy to the example in-\nstances, it proved to be effective and useful as an\nanalytical lens. Descriptions of LLM-integrated ap-\nplications commonly explain background information\nand details of the application domain in addition to\nits LLM integration. When used as an analytical\nlens, the taxonomy quickly directs the analysis to-\nwards the aspects of LLM integration, abstracting\nfrom the specificities of the domain.\nThetaxonomydescribeshowLLMcapabilitiescanbe\nleveraged in software systems, offers inspiration for\nLLM-based functions, and outlines options for their\nimplementation as follows. The Skillsdimension out-\nlines the range of capabilities an LLM can contribute\nto an application through a concise set of characteris-\ntics, while the Function dimension suggests potential\nuses, furthersupportedbythe Interaction dimension.\nTheOutput Type dimension indicates options for en-\ncoding the output of an LLM in formats beyond plain\ntext, making it processable by software. The Output\nConsumer dimension illustrates the diverse ways to\nutilizeoractuponLLMoutput. Thus, thetaxonomy,\nas intended, spans a design space for LLM integra-\ntions.\nThe sampled LLM-integrated applications showcase\nthe creativity of researchers and developers in ap-\nplying and exploiting the potentials of LLMs, rang-\ning from straightforward solutions (e.g., TruckPla-\ntoon) to highly sophisticated and technically com-\nplex ones (e.g., AutoDroid ). When using the tax-\nonomy to inspire innovative uses of LLMs, we recom-\nmend supplementing it with descriptions of example\napplicationstoenhanceitsillustrativeness. Thechar-\nacteristics of the Skillsdimension are derived prag-\nmatically from the investigated example instances.\nWhile they do not claim to be exhaustive or deeplyrooted in LLM theory or cognitive science, they add\nrelevant details to the categorizations and illustrate\ndesign options and potentials for using LLMs as soft-\nware components.\nIt emerged as a key insight of this research that,\nrather than analyzing an LLM-integrated application\nin whole, analysis should start with the identifica-\ntion and description of its distinct LLM components.\nThis is essential for gaining a clear understanding of\nhow the application utilizes the capabilities of LLMs.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2728, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "78a41651-ec9f-4053-adc1-b592e00c44d5": {"__data__": {"id_": "78a41651-ec9f-4053-adc1-b592e00c44d5", "embedding": null, "metadata": {"page_label": "18", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "77b25a03-dc3a-4abf-9b61-b485ac5e4813", "node_type": "4", "metadata": {"page_label": "18", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "59deeccf9bcf9e562d20a80afefd573054a8078ab08bd155a1264e122300a190", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d46ccd2-0ca3-4a4f-8aa5-2747f8e7fa8a", "node_type": "1", "metadata": {"page_label": "18", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "5e6fbce1ce9b582156098fdd19c65616cf2744c3b2f322f8e6bd4e86d8a0b268", "class_name": "RelatedNodeInfo"}}, "text": "When using the tax-\nonomy to inspire innovative uses of LLMs, we recom-\nmend supplementing it with descriptions of example\napplicationstoenhanceitsillustrativeness. Thechar-\nacteristics of the Skillsdimension are derived prag-\nmatically from the investigated example instances.\nWhile they do not claim to be exhaustive or deeplyrooted in LLM theory or cognitive science, they add\nrelevant details to the categorizations and illustrate\ndesign options and potentials for using LLMs as soft-\nware components.\nIt emerged as a key insight of this research that,\nrather than analyzing an LLM-integrated application\nin whole, analysis should start with the identifica-\ntion and description of its distinct LLM components.\nThis is essential for gaining a clear understanding of\nhow the application utilizes the capabilities of LLMs.\nThe LLM-integrated application then manifests as a\ncombinationofitsLLMcomponents. Asshowninfig-\nure 1, the visualization effectively displays both the\nquantity and the variety of LLM components in an\nLLM-integrated application.\nLLM components interact through prompt chaining,\nwhere one LLM component\u2019s output feeds into an-\nother\u2019s input [67]. When an LLM-integrated applica-\ntion involves such an interaction, the taxonomy rep-\nresents it as an LLMcharacteristic within a Prompt\ndimension. The taxonomy can capture the variance\nin these interactions. For instance, in AutoDroid\nTaskExecutor andLowCode Executing , the\nLLMcharacteristic appears in the Prompt State di-\nmension, because their prompt components (knowl-\nedge base excerpts and prompt definition, respec-\ntively) are generated by other LLM components in a\npreparatory stage. In contrast, the LLMcharacter-\nistic appears in the Prompt Task dimension for Ma-\ntrixProduction Operator , because its prompt\npart is generated individually by the MatrixPro-\nduction Manager almost immediately before use.\nTaxonomy dimensions that cover entire LLM-\nintegrated applications may be useful. Given their\ncomplexity, these dimensions should be designed\nbasedonabroaderrangeofexamples, whichwillonly\nbecome available as more LLM-integrated applica-\ntions are developed and their architectures disclosed\nin the future. Extensions to the taxonomy could\nalso include dimensions for describing the structure\nof prompts in more detail, as well as dimensions ad-\ndressing characteristics of the language models used.\n18", "mimetype": "text/plain", "start_char_idx": 1904, "end_char_idx": 4292, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b814134-8d74-442b-bfe7-3c18cbf6dcd6": {"__data__": {"id_": "0b814134-8d74-442b-bfe7-3c18cbf6dcd6", "embedding": null, "metadata": {"page_label": "19", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6084061-aef8-4513-9e64-fe1ab596cefd", "node_type": "4", "metadata": {"page_label": "19", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "7907912b19c02857f008cdf14821a974e5d4e5d962c739359b36a36796da9cda", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "073b12e4-6759-4fd5-83e5-a616501394c8", "node_type": "1", "metadata": {}, "hash": "579c376dd8cf1eea040e83680cb6d3e03304563312b9c018e1e4763310d4fc18", "class_name": "RelatedNodeInfo"}}, "text": "Table 4: LLM usage in the sample instances. \u201cEvals\u201d indicates evaluations of various LLMs.\nApplication Used or best LLM Evals Comments\nHoneycomb GPT-3.5 yes GPT-4 far too slow\nLowCode GPT-3.5-turbo\nMyCrunchGpt GPT-3.5 then awaiting the publication of GPT-4\nMatrixProduction text-davinci-003\nWorkplaceRobot GPT-3\nAutoDroid GPT-4 yes GPT-4 best for tasks requiring many steps\nProgPrompt GPT-3 CODEX better, but access limits prohibitive\nFactoryAssistants GPT-3.5\nSgpTod GPT-3.5 yes GPT-3.5 best more often than others combined\nTruckPlatoon GPT-3.5-turbo\nExcelCopilot N/A combined LLMs in Copilot for Microsoft 365 [43]\n7. Conclusion\nThis paper investigates the use of LLMs as soft-\nware components. Its perspective differs from cur-\nrent software engineering research, which investigates\nLLMs as tools for software development [14, 22] and\nfromresearchexaminingLLMsasautonomousagents\n[11, 62, 57, 21]. This paper defines the concept of an\nLLM component as a software component that re-\nalizes its functionality by invoking an LLM. While\nLLM components implicitly appear in various works,\ntermed, for example, \u201cprompters\u201d, \u201cprompted LLM\u201d,\n\u201cprompt module\u201d, or \u201cmodule\u201d [30, 71, 6, 7], to our\nknowledge, this concept has not yet been formalized\nor systematically investigated.\nThe main contribution of this study is a taxonomy\nfor the analysis and description of LLM components,\nextending to LLM-integrated applications by charac-\nterizing them as combinations of LLM components.\nIn addition to the dimensions and characteristics of\nthe taxonomy, the study contributes a taxonomy vi-\nsualization based on feature vectors, which is more\ncompact than the established visualizations such as\nmorphological boxes [55] or radar charts. It repre-\nsentsanLLM-integratedapplicationasonevisualen-\ntity in a tabular format, with its LLM components\ndisplayed as rows.\nThe taxonomy was constructed using established\nmethods, based on a set of example instances, and\nevaluated with a new set of example instances. Thecombined samples exhibit broad variation along the\nidentified dimensions. For some instances, informa-\ntion was not available, necessitating speculative in-\nterpretation.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2168, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "073b12e4-6759-4fd5-83e5-a616501394c8": {"__data__": {"id_": "073b12e4-6759-4fd5-83e5-a616501394c8", "embedding": null, "metadata": {"page_label": "19", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c6084061-aef8-4513-9e64-fe1ab596cefd", "node_type": "4", "metadata": {"page_label": "19", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "7907912b19c02857f008cdf14821a974e5d4e5d962c739359b36a36796da9cda", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b814134-8d74-442b-bfe7-3c18cbf6dcd6", "node_type": "1", "metadata": {"page_label": "19", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "fac9a9574827e8b56aec6d92e33644700e07d9695ac9c6a3afab9ee6c816d9af", "class_name": "RelatedNodeInfo"}}, "text": "The main contribution of this study is a taxonomy\nfor the analysis and description of LLM components,\nextending to LLM-integrated applications by charac-\nterizing them as combinations of LLM components.\nIn addition to the dimensions and characteristics of\nthe taxonomy, the study contributes a taxonomy vi-\nsualization based on feature vectors, which is more\ncompact than the established visualizations such as\nmorphological boxes [55] or radar charts. It repre-\nsentsanLLM-integratedapplicationasonevisualen-\ntity in a tabular format, with its LLM components\ndisplayed as rows.\nThe taxonomy was constructed using established\nmethods, based on a set of example instances, and\nevaluated with a new set of example instances. Thecombined samples exhibit broad variation along the\nidentified dimensions. For some instances, informa-\ntion was not available, necessitating speculative in-\nterpretation. However, since the sample is used for\nidentifying options rather than quantitative analysis,\nthis issue and the representativeness of the sample\nare not primary concerns. The evaluation was con-\nducted by the developer of the taxonomy, consistent\nwith recent related work [21, 52, 48]. Using a new\nsample for evaluation strengthens the validity of the\nresults.\nA further significant contribution of the paper is a\nsystematic overview of a sample of LLM-integrated\napplications across various industrial and technical\ndomains, illustrating a spectrum of conceptual ideas\nand implementation options.\nAs the examples show, LLM components can re-\nplace traditionally coded functions in software sys-\ntems and enable novel use cases. However, practi-\ncal challenges persist. Developers report that new\nsoftware engineering methods are required, e.g., for\nmanaging prompts as software assets and for test-\ning and monitoring applications. For instance, the\ncosts of LLM invocations prohibit the extensive au-\ntomated testing that is standard in software devel-\nopment practice [44, 7]. Challenges also arise from\nthe inherent indeterminism and uncontrollability of\nLLMs. Small variations in prompts can lead to differ-\nences in outputs, while automated output processing\n19", "mimetype": "text/plain", "start_char_idx": 1272, "end_char_idx": 3436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "841ebeb0-873f-4255-8d18-d8ee69df8b7b": {"__data__": {"id_": "841ebeb0-873f-4255-8d18-d8ee69df8b7b", "embedding": null, "metadata": {"page_label": "20", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e4a8664-5d52-4c8c-be41-ca06b5c8f113", "node_type": "4", "metadata": {"page_label": "20", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "407680b278919efe645ab96646a45ece9b04946c9245ea295789d75ffebda805", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0f2b3dcf-cadc-418f-b1c9-5e75dedf7cf2", "node_type": "1", "metadata": {}, "hash": "64d4ba89607efb7d1b3aea23ebcfcc142b4d60b20d91ee5cdb0169072e45fbd5", "class_name": "RelatedNodeInfo"}}, "text": "in LLM-integrated applications requires the output\nto adhere to a specified format.\nFurthermore, the deployment mode of LLMs,\nwhether local (on the same hardware as the ap-\nplication) or remote, managed privately or offered\nas Language-Models-as-a-Service (LMaaS), has im-\npact on performance and usability. Table 4 gives an\noverview of the LLMs used in our sample of appli-\ncations. Where papers report evaluations of mul-\ntiple LLMs, the table displays the chosen or best-\nperforming LLM. Although not representative, the\ntable provides some insights. LMaaS dominates,\nlikely due to its convenience, but more importantly,\ndue to the superior performance of the provided\nLLMs.\nConcerns regarding LMaaS include privacy, as sensi-\ntive data might be transmitted to the LLM through\nthe prompt [64], and service quality, i.e., reliability,\navailability, and costs. Costs typically depend on the\nquantity of processed tokens. This quantity also af-\nfects latency, which denotes the processing time of\nan LLM invocation. A further important factor for\nlatency is the size of the LLM, with larger models\nbeing slower [7].\nWhen building LLM-based applications for real-\nworlduse, thereliabilityandavailabilityofanLMaaS\nare crucial. Availability depends not only on the\ntechnical stability of the service, but also on factors\nsuch as increased latency during high usage periods\nor usage restrictions imposed by the provider of an\nLMaaS, as reported for ProgPrompt [51]. Beyond\ntechnical aspects, the reliability of an LMaaS also en-\ncompassesitsbehavior. Forinstance,providersmight\nmodify a model to enhance its security, potentially\nimpacting applications that rely on it.\nDespite practical challenges, integrating LLMs into\nsystems has the potential to alter the way software\nis constructed and the types of systems that can be\nrealized. Prompts are central to the functioning of\nLLM components which pose specific requirements\nsuch as strict format adherence. Therefore, an im-\nportant direction for future research will be prompt\nengineering specifically tailored for LLM-integrated\napplications.In future work, the taxonomy will be extended to\ndistinguish finer-grained parts of prompts, allowing a\nmore detailed description and comparison of prompts\nandrelatedexperimentalresults. Initialstudiesshare\nresults on the format-following behavior of LLMs [68]\nas a subtopic of instruction-following [73], derived\nwith synthetic benchmark data.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 2436, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0f2b3dcf-cadc-418f-b1c9-5e75dedf7cf2": {"__data__": {"id_": "0f2b3dcf-cadc-418f-b1c9-5e75dedf7cf2", "embedding": null, "metadata": {"page_label": "20", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9e4a8664-5d52-4c8c-be41-ca06b5c8f113", "node_type": "4", "metadata": {"page_label": "20", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "407680b278919efe645ab96646a45ece9b04946c9245ea295789d75ffebda805", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "841ebeb0-873f-4255-8d18-d8ee69df8b7b", "node_type": "1", "metadata": {"page_label": "20", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "6d888336d2529213a2faa0f983cd94c767750cea823f7e1374915db470c031a2", "class_name": "RelatedNodeInfo"}}, "text": "Forinstance,providersmight\nmodify a model to enhance its security, potentially\nimpacting applications that rely on it.\nDespite practical challenges, integrating LLMs into\nsystems has the potential to alter the way software\nis constructed and the types of systems that can be\nrealized. Prompts are central to the functioning of\nLLM components which pose specific requirements\nsuch as strict format adherence. Therefore, an im-\nportant direction for future research will be prompt\nengineering specifically tailored for LLM-integrated\napplications.In future work, the taxonomy will be extended to\ndistinguish finer-grained parts of prompts, allowing a\nmore detailed description and comparison of prompts\nandrelatedexperimentalresults. Initialstudiesshare\nresults on the format-following behavior of LLMs [68]\nas a subtopic of instruction-following [73], derived\nwith synthetic benchmark data. It is necessary to\ncomplementtheirresultswithexperimentsusingdata\nand tasks from real application development projects\nbecause, in the early stages of this field, synthetic\nbenchmarks may fail to cover relevant aspects within\nthe wide range of possible options. Another crucial\nresearch direction involves exploring how LLM char-\nacteristics correspond to specific tasks, such as de-\ntermining the optimal LLM size for intent detection\ntasks. Thetaxonomydevelopedinthisstudycansys-\ntematize such experiments and their outcomes. Ad-\nditionally, it provides a structured framework for de-\nlineating design choices in LLM components, making\nit a valuable addition to future training materials.\nAcknowledgements\nSpecialthankstoAntoniaWeberandConstantinWe-\nberforproofreadingandprovidinginsightfulandcon-\nstructive comments.\nReferences\n[1] EleniAdamopoulouandLefterisMoussiades. An\nOverview of Chatbot Technology. In Ilias Ma-\nglogiannis, Lazaros Iliadis, and Elias Pimeni-\ndis, editors, Artificial Intelligence Applications\nand Innovations , IFIP Advances in Information\nand Communication Technology, pages 373\u2013383,\nCham, 2020. Springer International Publishing.\ndoi:10.1007/978-3-030-49186-4_31.\n[2] Sebastian Bader, Erich Barnstedt, Heinz Be-\ndenbender, Bernd Berres, Meik Billmann, and\nMarko Ristin. Details of the asset adminis-\ntration shell-part 1: The exchange of informa-\ntion between partners in the value chain of in-\ndustrie 4.0 (version 3.0 rc02). Working Paper,\nBerlin: Federal Ministry for Economic Affairs\n20", "mimetype": "text/plain", "start_char_idx": 1547, "end_char_idx": 3956, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7e13e149-97fd-4d8c-8844-ef320cdee892": {"__data__": {"id_": "7e13e149-97fd-4d8c-8844-ef320cdee892", "embedding": null, "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb884f34-2abe-4bf1-8b02-291b33ff8e89", "node_type": "4", "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2868ff44e8f493a4ab0babb4f28b2602f7d7bfefd5a253f8f638e79a9f253b77", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "85df8eda-1ebd-407f-8157-fc9e728bbb58", "node_type": "1", "metadata": {}, "hash": "e23a660df490a0c43c0718643eab1f1b24acf62d995e2c8fc17c01181eb90d3a", "class_name": "RelatedNodeInfo"}}, "text": "and Climate Action (BMWK), 2022. doi.org/\n10.21256/zhaw-27075 .\n[3] Marcos Baez, Florian Daniel, Fabio Casati, and\nBoualem Benatallah. Chatbot integration in few\npatterns. IEEE Internet Computing , pages 1\u20131,\n2020. doi:10.1109/MIC.2020.3024605.\n[4] Tom Bocklisch, Thomas Werkmeister,\nDaksh Varshneya, and Alan Nichol. Task-\nOriented Dialogue with In-Context Learn-\ning. (arXiv:2402.12234), February 2024.\ndoi:10.48550/arXiv.2402.12234.\n[5] Yuzhe Cai, Shaoguang Mao, Wenshan Wu, Ze-\nhua Wang, Yaobo Liang, Tao Ge, Chenfei Wu,\nWang You, Ting Song, Yan Xia, Jonathan Tien,\nand Nan Duan. Low-code LLM: Visual Pro-\ngrammingoverLLMs. (arXiv:2304.08103), April\n2023. doi:10.48550/arXiv.2304.08103.\n[6] Lang Cao. DiagGPT: An LLM-based Chatbot\nwith Automatic Topic Management for Task-\nOriented Dialogue. (arXiv:2308.08043), August\n2023. doi:10.48550/arXiv.2308.08043.\n[7] Phillip Carter. All the Hard Stuff No-\nbody Talks About When Building Prod-\nucts with LLMs . Honeycomb, May\n2023. https://www.honeycomb.io/blog/\nhard-stuff-nobody-talks-about-llm .\n[8] Phillip Carter. So We Shipped an AI Prod-\nuct. Did It Work? Honeycomb, Octo-\nber 2023. https://www.honeycomb.io/blog/\nwe-shipped-ai-product .\n[9] Banghao Chen, Zhaofeng Zhang, Nicolas\nLangren\u00e9, and Shengxin Zhu. Unleash-\ning the potential of prompt engineering in\nLarge Language Models: A comprehensive\nreview. (arXiv:2310.14735), October 2023.\ndoi:10.48550/arXiv.2310.14735.\n[10] Wang Chen, Yan-yi Liu, Tie-zheng Guo, Da-\npeng Li, Tao He, Li Zhi, Qing-wen Yang,\nHui-han Wang, and Ying-you Wen. Sys-\ntems engineering issues for industry appli-\ncations of large language model.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1625, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85df8eda-1ebd-407f-8157-fc9e728bbb58": {"__data__": {"id_": "85df8eda-1ebd-407f-8157-fc9e728bbb58", "embedding": null, "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb884f34-2abe-4bf1-8b02-291b33ff8e89", "node_type": "4", "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2868ff44e8f493a4ab0babb4f28b2602f7d7bfefd5a253f8f638e79a9f253b77", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7e13e149-97fd-4d8c-8844-ef320cdee892", "node_type": "1", "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "0c52797aefa0351686209eb4ddce06f41146cd36030933c687eec9e2d92ec780", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "41f26057-4d33-4078-8bd7-6f35caf256ca", "node_type": "1", "metadata": {}, "hash": "2087d08dc1c42687247155e3f25b3d8a8d0aaf444494206d1bb5ddd5ade02405", "class_name": "RelatedNodeInfo"}}, "text": "[8] Phillip Carter. So We Shipped an AI Prod-\nuct. Did It Work? Honeycomb, Octo-\nber 2023. https://www.honeycomb.io/blog/\nwe-shipped-ai-product .\n[9] Banghao Chen, Zhaofeng Zhang, Nicolas\nLangren\u00e9, and Shengxin Zhu. Unleash-\ning the potential of prompt engineering in\nLarge Language Models: A comprehensive\nreview. (arXiv:2310.14735), October 2023.\ndoi:10.48550/arXiv.2310.14735.\n[10] Wang Chen, Yan-yi Liu, Tie-zheng Guo, Da-\npeng Li, Tao He, Li Zhi, Qing-wen Yang,\nHui-han Wang, and Ying-you Wen. Sys-\ntems engineering issues for industry appli-\ncations of large language model. AppliedSoft Computing , 151:111165, January 2024.\ndoi:10.1016/j.asoc.2023.111165.\n[11] Yuheng Cheng, Ceyao Zhang, Zhengwen Zhang,\nXiangrui Meng, Sirui Hong, Wenhao Li, Zihao\nWang, Zekai Wang, Feng Yin, Junhua Zhao, and\nXiuqiang He. Exploring Large Language Model\nbased Intelligent Agents: Definitions, Methods,\nand Prospects. (arXiv:2401.03428), January\n2024. doi:10.48550/arXiv.2401.03428.\n[12] Silvia Colabianchi, Andrea Tedeschi, and\nFrancesco Costantino. Human-technology in-\ntegration with industrial conversational agents:\nA conceptual architecture and a taxonomy for\nmanufacturing. Journal of Industrial Infor-\nmation Integration , 35:100510, October 2023.\ndoi:10.1016/j.jii.2023.100510.\n[13] Jonathan Evertz, Merlin Chlosta, Lea Sch\u00f6n-\nherr, and Thorsten Eisenhofer. Whispers in\nthe Machine: Confidentiality in LLM-integrated\nSystems. (arXiv:2402.06922), February 2024.\ndoi:10.48550/arXiv.2402.06922.\n[14] Angela Fan, Beliz Gokkaya, Mark Harman,\nMitya Lyubarskiy, Shubho Sengupta, Shin Yoo,\nand Jie M. Zhang. Large Language Models\nfor Software Engineering: Survey and Open\nProblems.", "mimetype": "text/plain", "start_char_idx": 1045, "end_char_idx": 2716, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "41f26057-4d33-4078-8bd7-6f35caf256ca": {"__data__": {"id_": "41f26057-4d33-4078-8bd7-6f35caf256ca", "embedding": null, "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb884f34-2abe-4bf1-8b02-291b33ff8e89", "node_type": "4", "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2868ff44e8f493a4ab0babb4f28b2602f7d7bfefd5a253f8f638e79a9f253b77", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "85df8eda-1ebd-407f-8157-fc9e728bbb58", "node_type": "1", "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "804db53bfde79cd5fe797edfe906291388f00f4862e13f6b2e3343c1ddcdc08f", "class_name": "RelatedNodeInfo"}}, "text": "Journal of Industrial Infor-\nmation Integration , 35:100510, October 2023.\ndoi:10.1016/j.jii.2023.100510.\n[13] Jonathan Evertz, Merlin Chlosta, Lea Sch\u00f6n-\nherr, and Thorsten Eisenhofer. Whispers in\nthe Machine: Confidentiality in LLM-integrated\nSystems. (arXiv:2402.06922), February 2024.\ndoi:10.48550/arXiv.2402.06922.\n[14] Angela Fan, Beliz Gokkaya, Mark Harman,\nMitya Lyubarskiy, Shubho Sengupta, Shin Yoo,\nand Jie M. Zhang. Large Language Models\nfor Software Engineering: Survey and Open\nProblems. (arXiv:2310.03533), November 2023.\ndoi:10.48550/arXiv.2310.03533.\n[15] Wenqi Fan, Zihuai Zhao, Jiatong Li, Yunqing\nLiu, Xiaowei Mei, Yiqi Wang, Zhen Wen, Fei\nWang, Xiangyu Zhao, Jiliang Tang, and Qing\nLi. Recommender Systems in the Era of Large\nLanguage Models (LLMs). (arXiv:2307.02046),\nAugust 2023. doi:10.48550/arXiv.2307.02046.\n[16] David Fortin. Microsoft Copilot in Excel:\nWhat It Can and Can\u2019t Do . YouTube, Jan-\nuary 2024. https://www.youtube.com/watch?\nv=-fsu9IXMZvo .\n[17] Martin Fowler. Patterns of Enterprise Applica-\ntion Architecture . 2002. ISBN 978-0-321-12742-\n6.\n21", "mimetype": "text/plain", "start_char_idx": 2215, "end_char_idx": 3301, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b0089072-8336-4b13-875e-6f69a0a1fab9": {"__data__": {"id_": "b0089072-8336-4b13-875e-6f69a0a1fab9", "embedding": null, "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94fc6d4f-2b9e-40d6-93e0-f25e594122cf", "node_type": "4", "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "831a12972fe806d69b103bea58ed79fb185cc959cb6e6cfea54a5b953def6bb9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cff581c7-9268-4f33-8f3c-0afd09f23775", "node_type": "1", "metadata": {}, "hash": "561dabf76d12b07f73cffa43f45ae4d3665e4895c6ce6519179ce00f3192a81a", "class_name": "RelatedNodeInfo"}}, "text": "[18] Shirley Gregor. The nature of theory in infor-\nmation systems. MIS quarterly , pages 611\u2013642,\n2006. doi:10.2307/25148742.\n[19] Yanchu Guan, Dong Wang, Zhixuan Chu, Shiyu\nWang, Feiyue Ni, Ruihua Song, Longfei Li, Jin-\njie Gu, and Chenyi Zhuang. Intelligent Vir-\ntual Assistants with LLM-based Process Au-\ntomation. (arXiv:2312.06677), December 2023.\ndoi:10.48550/arXiv.2312.06677.\n[20] Muhammad Usman Hadi, Qasem Al Tashi,\nRizwan Qureshi, Abbas Shah, Amgad Muneer,\nMuhammad Irfan, Anas Zafar, Muhammad Bi-\nlal Shaikh, Naveed Akhtar, Jia Wu, and Seyedali\nMirjalili. Large Language Models: A Compre-\nhensive Survey of its Applications, Challenges,\nLimitations, and Future Prospects, September\n2023. doi:10.36227/techrxiv.23589741.v3.\n[21] Thorsten H\u00e4ndler. A Taxonomy for Au-\ntonomous LLM-Powered Multi-Agent Architec-\ntures:. In Proceedings of the 15th Interna-\ntional Joint Conference on Knowledge Discov-\nery, Knowledge Engineering and Knowledge\nManagement , pages 85\u201398, Rome, Italy, 2023.\nSCITEPRESS - Science and Technology Publi-\ncations. doi:10.5220/0012239100003598.\n[22] Xinyi Hou, Yanjie Zhao, Yue Liu, Zhou Yang,\nKailongWang, LiLi, XiapuLuo, DavidLo, John\nGrundy, and Haoyu Wang. Large Language\nModels for Software Engineering: A Systematic\nLiterature Review. (arXiv:2308.10620), Septem-\nber 2023. doi:10.48550/arXiv.2308.10620.\n[23] Vojt\u011bch Hude\u010dek and Ondrej Dusek. Are\nLarge Language Models All You Need for Task-\nOriented Dialogue?", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1449, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cff581c7-9268-4f33-8f3c-0afd09f23775": {"__data__": {"id_": "cff581c7-9268-4f33-8f3c-0afd09f23775", "embedding": null, "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94fc6d4f-2b9e-40d6-93e0-f25e594122cf", "node_type": "4", "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "831a12972fe806d69b103bea58ed79fb185cc959cb6e6cfea54a5b953def6bb9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b0089072-8336-4b13-875e-6f69a0a1fab9", "node_type": "1", "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "3e89894b6fe7f3d05645278e83ccb1980109f34694da328478398055397ee6a9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d9e4174-77b8-49bb-b2ca-c5746775aff2", "node_type": "1", "metadata": {}, "hash": "3cb88762a2e0280689574e1faea368b7fdee620f41fb8a8e7ab7fe216d3c6dc0", "class_name": "RelatedNodeInfo"}}, "text": "SCITEPRESS - Science and Technology Publi-\ncations. doi:10.5220/0012239100003598.\n[22] Xinyi Hou, Yanjie Zhao, Yue Liu, Zhou Yang,\nKailongWang, LiLi, XiapuLuo, DavidLo, John\nGrundy, and Haoyu Wang. Large Language\nModels for Software Engineering: A Systematic\nLiterature Review. (arXiv:2308.10620), Septem-\nber 2023. doi:10.48550/arXiv.2308.10620.\n[23] Vojt\u011bch Hude\u010dek and Ondrej Dusek. Are\nLarge Language Models All You Need for Task-\nOriented Dialogue? In Svetlana Stoyanchev,\nShafiq Joty, David Schlangen, Ondrej Dusek,\nCasey Kennington, and Malihe Alikhani, edi-\ntors,Proceedings of the 24th Annual Meeting of\nthe Special Interest Group on Discourse and Di-\nalogue,pages216\u2013228,Prague,Czechia,Septem-\nber 2023. Association for Computational Lin-\nguistics. doi:10.18653/v1/2023.sigdial-1.21.[24] Kevin Maik Jablonka, Qianxiang Ai, Alexander\nAl-Feghali, ShrutiBadhwar, JoshuaD.Bocarsly,\nAndres M. Bran, Stefan Bringuier, Catherine L.\nBrinson, Kamal Choudhary, Defne Circi, Sam\nCox, Wibe A. de Jong, Matthew L. Evans, Nico-\nlas Gastellu, Jerome Genzling, Mar\u00eda Victoria\nGil, Ankur K. Gupta, Zhi Hong, Alishba Im-\nran, Sabine Kruschwitz, Anne Labarre, Jakub\nL\u00e1la, Tao Liu, Steven Ma, Sauradeep Majum-\ndar, Garrett W. Merz, Nicolas Moitessier, Elias\nMoubarak, Beatriz Mouri\u00f1o, Brenden Pelkie,\nMichael Pieler, Mayk Caldas Ramos, Bojana\nRankovi\u0107, Samuel Rodriques, Jacob Sanders,\nPhilippe Schwaller, Marcus Schwarting, Jiale\nShi, Berend Smit, Ben Smith, Joren Van Herck,\nChristoph V\u00f6lker, Logan Ward, Sean War-\nren, Benjamin Weiser, Sylvester Zhang, Xiaoqi\nZhang, Ghezal Ahmad Zia, Aristana Scour-\ntas, K. Schmidt, Ian Foster, Andrew White,\nand Ben Blaiszik.", "mimetype": "text/plain", "start_char_idx": 996, "end_char_idx": 2650, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d9e4174-77b8-49bb-b2ca-c5746775aff2": {"__data__": {"id_": "0d9e4174-77b8-49bb-b2ca-c5746775aff2", "embedding": null, "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "94fc6d4f-2b9e-40d6-93e0-f25e594122cf", "node_type": "4", "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "831a12972fe806d69b103bea58ed79fb185cc959cb6e6cfea54a5b953def6bb9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cff581c7-9268-4f33-8f3c-0afd09f23775", "node_type": "1", "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "d4f57ee3bcdd16d3274c3041d4174e9afcb7ad9237eaa09000e2d7b50600f104", "class_name": "RelatedNodeInfo"}}, "text": "14 examples of how LLMs\ncan transform materials science and chem-\nistry: A reflection on a large language model\nhackathon. Digital Discovery , 2(5):1233\u20131250,\n2023. doi:10.1039/D3DD00113J.\n[25] Jean Kaddour, Joshua Harris, Maximilian\nMozes, Herbie Bradley, Roberta Raileanu, and\nRobert McHardy. Challenges and Applica-\ntions of Large Language Models, July 2023.\ndoi:10.48550/arXiv.2307.10169.\n[26] Samuel Kernan Freire, Mina Foosherian, Chao-\nfan Wang, and Evangelos Niforatos. Harnessing\nLarge Language Models for Cognitive Assistants\nin Factories. In Proceedings of the 5th Interna-\ntional Conference on Conversational User Inter-\nfaces, CUI \u201923, pages 1\u20136, New York, NY, USA,\nJuly 2023. Association for Computing Machin-\nery. doi:10.1145/3571884.3604313.\n[27] Anis Koubaa, Wadii Boulila, Lahouari Ghouti,\nAyyub Alzahem, and Shahid Latif. Explor-\ning ChatGPT Capabilities and Limitations: A\nSurvey.IEEE Access , 11:118698\u2013118721, 2023.\ndoi:10.1109/ACCESS.2023.3326474.\n[28] Varun Kumar, Leonard Gleyzer, Adar Ka-\nhana, Khemraj Shukla, and George Em Karni-\n22", "mimetype": "text/plain", "start_char_idx": 2651, "end_char_idx": 3711, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4ae6767c-4379-46fb-ab1b-af51ff869db4": {"__data__": {"id_": "4ae6767c-4379-46fb-ab1b-af51ff869db4", "embedding": null, "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6", "node_type": "4", "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "6d18e9172d6745ccf88eeb51d2ac206df57f7b3b2db199df9f270c65135704b7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ebe3fa39-7c40-44d9-a3fd-1bde7b5930b7", "node_type": "1", "metadata": {}, "hash": "0b9d7bb75a9bd4673b373a5fdbbf494674ec1312387509f8ba4259657f6f524c", "class_name": "RelatedNodeInfo"}}, "text": "adakis. MyCrunchGPT:ALLMAssistedFrame-\nwork for Scientific Machine Learning. Jour-\nnal of Machine Learning for Modeling and\nComputing , 4(4), 2023. doi.org/10.1615/\nJMachLearnModelComput.2023049518 .\n[29] Dennis Kundisch, Jan Muntermann,\nAnna Maria Oberl\u00e4nder, Daniel Rau, Maxi-\nmilian R\u00f6glinger, Thorsten Schoormann, and\nDaniel Szopinski. An Update for Taxonomy\nDesigners. Business & Information Systems\nEngineering , 64(4):421\u2013439, August 2022.\ndoi:10.1007/s12599-021-00723-x.\n[30] Gibbeum Lee, Volker Hartmann, Jongho\nPark, Dimitris Papailiopoulos, and Kang-\nwook Lee. Prompted LLMs as chatbot\nmodules for long open-domain conversation.\nIn Anna Rogers, Jordan Boyd-Graber, and\nNaoaki Okazaki, editors, Findings of the as-\nsociation for computational linguistics: ACL\n2023, pages 4536\u20134554, Toronto, Canada, July\n2023.AssociationforComputationalLinguistics.\ndoi:10.18653/v1/2023.findings-acl.277.\n[31] Pengfei Liu, Weizhe Yuan, Jinlan Fu, Zheng-\nbao Jiang, Hiroaki Hayashi, and Graham Neu-\nbig. Pre-train, Prompt, and Predict: A Sys-\ntematic Survey of Prompting Methods in Nat-\nural Language Processing. ACM Comput-\ning Surveys , 55(9):195:1\u2013195:35, January 2023.\ndoi:10.1145/3560815.\n[32] Yi Liu, Gelei Deng, Yuekang Li, Kailong Wang,\nTianwei Zhang, Yepang Liu, Haoyu Wang, Yan\nZheng, and Yang Liu. Prompt Injection at-\ntack against LLM-integrated Applications, June\n2023. doi:10.48550/arXiv.2306.05499.\n[33] Yuchen Liu, Luigi Palmieri, Sebastian\nKoch, Ilche Georgievski, and Marco Aiello.\nDELTA: Decomposed Efficient Long-Term\nRobot Task Planning using Large Language\nModels. (arXiv:2404.03275), April 2024.\ndoi:10.48550/arXiv.2404.03275.\n[34] Yupei Liu, Yuqi Jia, Runpeng Geng, Jinyuan\nJia, and Neil Zhenqiang Gong.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1720, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ebe3fa39-7c40-44d9-a3fd-1bde7b5930b7": {"__data__": {"id_": "ebe3fa39-7c40-44d9-a3fd-1bde7b5930b7", "embedding": null, "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6", "node_type": "4", "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "6d18e9172d6745ccf88eeb51d2ac206df57f7b3b2db199df9f270c65135704b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4ae6767c-4379-46fb-ab1b-af51ff869db4", "node_type": "1", "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "9c2676753d1589c2fdca4b22ee741785eea856fdd4dae5e247ce80fa0e7af762", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "384fda3c-30da-4539-b942-215697f354a9", "node_type": "1", "metadata": {}, "hash": "ffce52a3592ec0bcfc79ab8d6aa6edf0dd83570a2c98b1e28a9b20bb52cdcb6d", "class_name": "RelatedNodeInfo"}}, "text": "[32] Yi Liu, Gelei Deng, Yuekang Li, Kailong Wang,\nTianwei Zhang, Yepang Liu, Haoyu Wang, Yan\nZheng, and Yang Liu. Prompt Injection at-\ntack against LLM-integrated Applications, June\n2023. doi:10.48550/arXiv.2306.05499.\n[33] Yuchen Liu, Luigi Palmieri, Sebastian\nKoch, Ilche Georgievski, and Marco Aiello.\nDELTA: Decomposed Efficient Long-Term\nRobot Task Planning using Large Language\nModels. (arXiv:2404.03275), April 2024.\ndoi:10.48550/arXiv.2404.03275.\n[34] Yupei Liu, Yuqi Jia, Runpeng Geng, Jinyuan\nJia, and Neil Zhenqiang Gong. Prompt Injec-\ntion Attacks and Defenses in LLM-IntegratedApplications. (arXiv:2310.12815), October2023.\ndoi:10.48550/arXiv.2310.12815.\n[35] Shaoguang Mao, Qiufeng Yin, Yuzhe Cai,\nand Dan Qiao. LowCodeLLM. https:\n//github.com/chenfei-wu/TaskMatrix/\ntree/main/LowCodeLLM , May 2023.\n[36] Scott McLean, Gemma J. M. Read, Jason\nThompson,ChrisBaber,NevilleA.Stanton,and\nPaul M. Salmon. The risks associated with Ar-\ntificial General Intelligence: A systematic re-\nview.Journal of Experimental & Theoretical\nArtificial Intelligence , 35(5):649\u2013663, July 2023.\ndoi:10.1080/0952813X.2021.1964003.\n[37] Oier Mees, Jessica Borja-Diaz, and Wolfram\nBurgard. Grounding Language with Visual Af-\nfordances over Unstructured Data. In 2023\nIEEE International Conference on Robotics\nand Automation (ICRA) , pages 11576\u201311582,\nLondon, United Kingdom, May 2023. IEEE.\ndoi:10.1109/ICRA48891.2023.10160396.\n[38] Gr\u00e9goire Mialon, Roberto Dess\u00ec, Maria\nLomeli, Christoforos Nalmpantis, Ram Pa-\nsunuru, Roberta Raileanu, Baptiste Rozi\u00e8re,\nTimo Schick, Jane Dwivedi-Yu, Asli Ce-\nlikyilmaz, Edouard Grave, Yann LeCun,\nand Thomas Scialom.", "mimetype": "text/plain", "start_char_idx": 1187, "end_char_idx": 2830, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "384fda3c-30da-4539-b942-215697f354a9": {"__data__": {"id_": "384fda3c-30da-4539-b942-215697f354a9", "embedding": null, "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6", "node_type": "4", "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "6d18e9172d6745ccf88eeb51d2ac206df57f7b3b2db199df9f270c65135704b7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ebe3fa39-7c40-44d9-a3fd-1bde7b5930b7", "node_type": "1", "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "3f7de6d1f7ba6a48ffc69e655901a39aefd38549779b6990e51271f09a757834", "class_name": "RelatedNodeInfo"}}, "text": "[37] Oier Mees, Jessica Borja-Diaz, and Wolfram\nBurgard. Grounding Language with Visual Af-\nfordances over Unstructured Data. In 2023\nIEEE International Conference on Robotics\nand Automation (ICRA) , pages 11576\u201311582,\nLondon, United Kingdom, May 2023. IEEE.\ndoi:10.1109/ICRA48891.2023.10160396.\n[38] Gr\u00e9goire Mialon, Roberto Dess\u00ec, Maria\nLomeli, Christoforos Nalmpantis, Ram Pa-\nsunuru, Roberta Raileanu, Baptiste Rozi\u00e8re,\nTimo Schick, Jane Dwivedi-Yu, Asli Ce-\nlikyilmaz, Edouard Grave, Yann LeCun,\nand Thomas Scialom. Augmented Lan-\nguage Models: A Survey, February 2023.\ndoi:10.48550/arXiv.2302.07842.\n[39] Melanie Mitchell. Debates on the na-\nture of artificial general intelligence. Sci-\nence, 383(6689):eado7069, March 2024.\ndoi:10.1126/science.ado7069.\n[40] Quim Motger, Xavier Franch, and Jordi Marco.\nSoftware-Based Dialogue Systems: Survey,\nTaxonomy, and Challenges. ACM Comput-\ning Surveys , 55(5):91:1\u201391:42, December 2022.\ndoi:10.1145/3527450.\n[41] Fiona Fui-Hoon Nah, Ruilin Zheng, Jingyuan\nCai, Keng Siau, and Langtao Chen. Gen-\nerative AI and ChatGPT: Applications, chal-\nlenges, and AI-human collaboration. Jour-\n23", "mimetype": "text/plain", "start_char_idx": 2310, "end_char_idx": 3443, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c51d0c33-fd71-4610-b4fa-6bb340a85747": {"__data__": {"id_": "c51d0c33-fd71-4610-b4fa-6bb340a85747", "embedding": null, "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5702f49-0fbd-476c-99b1-bf733a55c02c", "node_type": "4", "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "691a7a3ceec3d1a573d3ebb94c5f392d6776b86d24a104252a7ecd2f993dc3a6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "90569f67-c917-44e8-9d5e-d9b97f8e2467", "node_type": "1", "metadata": {}, "hash": "abb1b80ff858be53bb353bac87bfac944118786826e3c329e3e49731dd33db53", "class_name": "RelatedNodeInfo"}}, "text": "nal of Information Technology Case and Ap-\nplication Research , 25(3):277\u2013304, July 2023.\ndoi:10.1080/15228053.2023.2233814.\n[42] Robert C Nickerson, Upkar Varshney, and\nJan Muntermann. A method for taxon-\nomy development and its application in in-\nformation systems. European Journal of In-\nformation Systems , 22(3):336\u2013359, May 2013.\ndoi:10.1057/ejis.2012.26.\n[43] Camille Pack, Cern McAtee, Samantha Robert-\nson, Dan Brown, Aditi Srivastava, and Kweku\nAko-Adjei. Microsoft Copilot for Microsoft\n365 overview. https://learn.microsoft.\ncom/en-us/copilot/microsoft-365/\nmicrosoft-365-copilot-overview , March\n2024.\n[44] Chris Parnin, Gustavo Soares, Rahul Pan-\ndita, Sumit Gulwani, Jessica Rich, and\nAustin Z. Henley. Building Your Own Prod-\nuct Copilot: Challenges, Opportunities, and\nNeeds. (arXiv:2312.14231), December 2023.\ndoi:10.48550/arXiv.2312.14231.\n[45] Rodrigo Pedro, Daniel Castro, Paulo Car-\nreira, and Nuno Santos. From Prompt In-\njections to SQL Injection Attacks: How Pro-\ntected is Your LLM-Integrated Web Appli-\ncation? (arXiv:2308.01990), August 2023.\ndoi:10.48550/arXiv.2308.01990.\n[46] Ken Peffers, Tuure Tuunanen, Marcus A.\nRothenberger, and Samir Chatterjee. A De-\nsign Science Research Methodology for Infor-\nmation Systems Research. Journal of Man-\nagement Information Systems , 24(3):45\u201377, De-\ncember 2007. ISSN 0742-1222, 1557-928X.\ndoi:10.2753/MIS0742-1222240302.\n[47] Mohaimenul Azam Khan Raiaan, Md. Sad-\ndam Hossain Mukta, Kaniz Fatema, Nur Mo-\nhammad Fahad, Sadman Sakib, Most Mar-\nufatul Jannat Mim, Jubaer Ahmad, Mo-\nhammed Eunus Ali, and Sami Azam. A Review\non Large Language Models: Architectures, Ap-\nplications, Taxonomies, Open Issues and Chal-lenges.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1692, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "90569f67-c917-44e8-9d5e-d9b97f8e2467": {"__data__": {"id_": "90569f67-c917-44e8-9d5e-d9b97f8e2467", "embedding": null, "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5702f49-0fbd-476c-99b1-bf733a55c02c", "node_type": "4", "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "691a7a3ceec3d1a573d3ebb94c5f392d6776b86d24a104252a7ecd2f993dc3a6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c51d0c33-fd71-4610-b4fa-6bb340a85747", "node_type": "1", "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f2697e839d9782ea135dc5a4e99cf0349f8c5acfada2b5baabf8aacef803de56", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "76df0ad1-304c-4bac-ad21-ba9b229c4260", "node_type": "1", "metadata": {}, "hash": "259076a775647b701fbdb74b412078dbde72fa658215f1abab1b666fce92eb0a", "class_name": "RelatedNodeInfo"}}, "text": "A De-\nsign Science Research Methodology for Infor-\nmation Systems Research. Journal of Man-\nagement Information Systems , 24(3):45\u201377, De-\ncember 2007. ISSN 0742-1222, 1557-928X.\ndoi:10.2753/MIS0742-1222240302.\n[47] Mohaimenul Azam Khan Raiaan, Md. Sad-\ndam Hossain Mukta, Kaniz Fatema, Nur Mo-\nhammad Fahad, Sadman Sakib, Most Mar-\nufatul Jannat Mim, Jubaer Ahmad, Mo-\nhammed Eunus Ali, and Sami Azam. A Review\non Large Language Models: Architectures, Ap-\nplications, Taxonomies, Open Issues and Chal-lenges. IEEE Access , 12:26839\u201326874, 2024.\ndoi:10.1109/ACCESS.2024.3365742.\n[48] Jack Daniel Rittelmeyer and Kurt Sandkuhl.\nMorphological Box for AI Solutions: Evalua-\ntion and Refinement with a Taxonomy Develop-\nmentMethod. InKnutHinkelmann, FranciscoJ.\nL\u00f3pez-Pellicer, and Andrea Polini, editors, Per-\nspectives in Business Informatics Research , Lec-\nture Notes in Business Information Process-\ning, pages 145\u2013157, Cham, 2023. Springer Na-\nture Switzerland. doi:10.1007/978-3-031-43126-\n5_11.\n[49] Shubhra Kanti Karmaker Santu and Dongji\nFeng. TELeR: A General Taxonomy of\nLLM Prompts for Benchmarking Complex\nTasks. (arXiv:2305.11430), October 2023.\ndoi:10.48550/arXiv.2305.11430.\n[50] Thorsten Schoormann, Frederik M\u00f6ller, and\nDaniel Szopinski. Exploring Purposes of Us-\ning Taxonomies. In Proceedings of the Inter-\nnational Conference on Wirtschaftsinformatik\n(WI), Nuernberg, Germany, February 2022.\n[51] Ishika Singh, Valts Blukis, Arsalan Mousa-\nvian, Ankit Goyal, Danfei Xu, Jonathan Trem-\nblay, Dieter Fox, Jesse Thomason, and Ani-\nmesh Garg. ProgPrompt: Generating Situated\nRobot Task Plans using Large Language Mod-\nels. In2023 IEEE International Conference on\nRobotics and Automation (ICRA) , pages 11523\u2013\n11530, London, United Kingdom, May 2023.", "mimetype": "text/plain", "start_char_idx": 1183, "end_char_idx": 2946, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "76df0ad1-304c-4bac-ad21-ba9b229c4260": {"__data__": {"id_": "76df0ad1-304c-4bac-ad21-ba9b229c4260", "embedding": null, "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b5702f49-0fbd-476c-99b1-bf733a55c02c", "node_type": "4", "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "691a7a3ceec3d1a573d3ebb94c5f392d6776b86d24a104252a7ecd2f993dc3a6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "90569f67-c917-44e8-9d5e-d9b97f8e2467", "node_type": "1", "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "621198779b41a40f722469613ed601f7cfe1836d1c0e19795f1ab589d3fb3e22", "class_name": "RelatedNodeInfo"}}, "text": "[50] Thorsten Schoormann, Frederik M\u00f6ller, and\nDaniel Szopinski. Exploring Purposes of Us-\ning Taxonomies. In Proceedings of the Inter-\nnational Conference on Wirtschaftsinformatik\n(WI), Nuernberg, Germany, February 2022.\n[51] Ishika Singh, Valts Blukis, Arsalan Mousa-\nvian, Ankit Goyal, Danfei Xu, Jonathan Trem-\nblay, Dieter Fox, Jesse Thomason, and Ani-\nmesh Garg. ProgPrompt: Generating Situated\nRobot Task Plans using Large Language Mod-\nels. In2023 IEEE International Conference on\nRobotics and Automation (ICRA) , pages 11523\u2013\n11530, London, United Kingdom, May 2023.\nIEEE. doi:10.1109/ICRA48891.2023.10161317.\n[52] Gero Strobel, Leonardo Banh, Frederik M\u00f6ller,\nand Thorsten Schoormann. Exploring Gener-\native Artificial Intelligence: A Taxonomy and\nTypes. In Proceedings of the 57th Hawaii Inter-\nnational Conference on System Sciences , Hon-\nolulu, Hawaii, January 2024. https://hdl.\nhandle.net/10125/106930 .\n[53] Hendrik Strobelt, Albert Webson, Victor Sanh,\nBenjamin Hoover, Johanna Beyer, Hanspeter\nPfister, and Alexander M. Rush. Interac-\ntive and Visual Prompt Engineering for Ad-\nhoc Task Adaptation With Large Language\n24", "mimetype": "text/plain", "start_char_idx": 2371, "end_char_idx": 3510, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "538ba1d5-3ad5-4a06-b93b-cdac66f52eea": {"__data__": {"id_": "538ba1d5-3ad5-4a06-b93b-cdac66f52eea", "embedding": null, "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22fc0375-79af-406d-a705-553934e3ff72", "node_type": "4", "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f913a690a46a1028abe695f42c4ec611c89434d9086b8e7e7bc044fad88ade99", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f04ff467-9789-4f80-a01d-9c6a83684748", "node_type": "1", "metadata": {}, "hash": "35e480f2867049d8a01e08be20023e269f20bf594ac4bb78d7c4b703025837b0", "class_name": "RelatedNodeInfo"}}, "text": "Models. IEEE Transactions on Visualization\nand Computer Graphics , pages 1\u201311, 2022.\ndoi:10.1109/TVCG.2022.3209479.\n[54] Daniel Szopinski, Thorsten Schoormann, and\nDennisKundisch. CriteriaasaPreludeforGuid-\ning Taxonomy Evaluation. In Proceedings of the\n53rd Hawaii International Conference on Sys-\ntem Sciences , 2020. https://hdl.handle.net/\n10125/64364 .\n[55] Daniel Szopinski, Thorsten Schoormann, and\nDennis Kundisch. Visualize different: To-\nwards researching the fit between taxon-\nomy visualizations and taxonomy tasks. In\nTagungsband Der 15. Internationalen Tagung\nWirtschaftsinformatik (WI 2020) , Potsdam,\n2020. doi:10.30844/wi_2020_k9-szopinski.\n[56] Manisha Thakkar and Nitin Pise. Unified Ap-\nproach for Scalable Task-Oriented Dialogue Sys-\ntem.International Journal of Advanced Com-\nputer Science and Applications , 15(4), 2024.\ndoi:10.14569/IJACSA.2024.01504108.\n[57] Oguzhan Topsakal and Tahir Cetin Akinci. Cre-\nating Large Language Model Applications Uti-\nlizing Langchain: A Primer on Developing LLM\nApps Fast. In International Conference on\nApplied Engineering and Natural Sciences , vol-\nume 1, pages 1050\u20131056, 2023.\n[58] Michael Unterkalmsteiner and Waleed Adbeen.\nA compendium and evaluation of taxonomy\nquality attributes. Expert Systems , 40(1):\ne13098, 2023. doi:10.1111/exsy.13098.\n[59] Bryan Wang, Gang Li, and Yang Li. En-\nabling Conversational Interaction with Mo-\nbile UI using Large Language Models. In\nProceedings of the 2023 CHI Conference on\nHuman Factors in Computing Systems , CHI\n\u201923, pages 1\u201317, New York, NY, USA, April\n2023. Association for Computing Machinery.\ndoi:10.1145/3544548.3580895.\n[60] Can Wang, Bolin Zhang, Dianbo Sui, Zhiying\nTu, Xiaoyu Liu, and Jiabao Kang. A Survey onEffective Invocation Methods of Massive LLM\nServices. (arXiv:2402.03408), February 2024.\ndoi:10.48550/arXiv.2402.03408.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1845, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f04ff467-9789-4f80-a01d-9c6a83684748": {"__data__": {"id_": "f04ff467-9789-4f80-a01d-9c6a83684748", "embedding": null, "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22fc0375-79af-406d-a705-553934e3ff72", "node_type": "4", "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f913a690a46a1028abe695f42c4ec611c89434d9086b8e7e7bc044fad88ade99", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "538ba1d5-3ad5-4a06-b93b-cdac66f52eea", "node_type": "1", "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "1709cc35d389a2bcac90ff12d3b6c726cbfd92b7f95b5183db85abc7cac35035", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5802214d-8956-4c2d-8a7f-b573b3a9eb29", "node_type": "1", "metadata": {}, "hash": "fd5dba38b401d655c280a8e8f407b0f95186bc2dc6e1bba32ae109dd9f93a7ae", "class_name": "RelatedNodeInfo"}}, "text": "[59] Bryan Wang, Gang Li, and Yang Li. En-\nabling Conversational Interaction with Mo-\nbile UI using Large Language Models. In\nProceedings of the 2023 CHI Conference on\nHuman Factors in Computing Systems , CHI\n\u201923, pages 1\u201317, New York, NY, USA, April\n2023. Association for Computing Machinery.\ndoi:10.1145/3544548.3580895.\n[60] Can Wang, Bolin Zhang, Dianbo Sui, Zhiying\nTu, Xiaoyu Liu, and Jiabao Kang. A Survey onEffective Invocation Methods of Massive LLM\nServices. (arXiv:2402.03408), February 2024.\ndoi:10.48550/arXiv.2402.03408.\n[61] Jun Wang, Guocheng He, and Yiannis Kan-\ntaros. Safe Task Planning for Language-\nInstructed Multi-Robot Systems using Confor-\nmal Prediction. (arXiv:2402.15368), February\n2024. doi:10.48550/arXiv.2402.15368.\n[62] Lei Wang, Chen Ma, Xueyang Feng, Zeyu\nZhang, Hao Yang, Jingsen Zhang, Zhiyuan\nChen, Jiakai Tang, Xu Chen, Yankai Lin,\nWayne Xin Zhao, Zhewei Wei, and Jirong\nWen. A survey on large language model\nbased autonomous agents. Frontiers of Com-\nputer Science , 18(6):186345, March 2024.\ndoi:10.1007/s11704-024-40231-1.\n[63] Shu Wang, Muzhi Han, Ziyuan Jiao, Zeyu\nZhang, Ying Nian Wu, Song-Chun Zhu, and\nHangxin Liu. LLM3:Large Language Model-\nbased Task and Motion Planning with Motion\nFailure Reasoning. (arXiv:2403.11552), March\n2024. doi:10.48550/arXiv.2403.11552.\n[64] Hao Wen, Yuanchun Li, Guohong Liu, Shan-\nhui Zhao, Tao Yu, Toby Jia-Jun Li, Shiqi Jiang,\nYunhao Liu, Yaqin Zhang, and Yunxin Liu. Em-\npowering LLM to use Smartphone for Intelligent\nTask Automation. (arXiv:2308.15272), Septem-\nber 2023. doi:10.48550/arXiv.2308.15272.\n[65] Hao Wen, Yuanchun Li, and Sean KiteFly-\nKid.", "mimetype": "text/plain", "start_char_idx": 1311, "end_char_idx": 2945, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5802214d-8956-4c2d-8a7f-b573b3a9eb29": {"__data__": {"id_": "5802214d-8956-4c2d-8a7f-b573b3a9eb29", "embedding": null, "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22fc0375-79af-406d-a705-553934e3ff72", "node_type": "4", "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "f913a690a46a1028abe695f42c4ec611c89434d9086b8e7e7bc044fad88ade99", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f04ff467-9789-4f80-a01d-9c6a83684748", "node_type": "1", "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "01fc621f985e80e8471bd746ca34bd68408238c37366246b1f88ba368ae37f35", "class_name": "RelatedNodeInfo"}}, "text": "LLM3:Large Language Model-\nbased Task and Motion Planning with Motion\nFailure Reasoning. (arXiv:2403.11552), March\n2024. doi:10.48550/arXiv.2403.11552.\n[64] Hao Wen, Yuanchun Li, Guohong Liu, Shan-\nhui Zhao, Tao Yu, Toby Jia-Jun Li, Shiqi Jiang,\nYunhao Liu, Yaqin Zhang, and Yunxin Liu. Em-\npowering LLM to use Smartphone for Intelligent\nTask Automation. (arXiv:2308.15272), Septem-\nber 2023. doi:10.48550/arXiv.2308.15272.\n[65] Hao Wen, Yuanchun Li, and Sean KiteFly-\nKid. MobileLLM/AutoDroid. MobileLLM,Jan-\nuary 2024. https://github.com/MobileLLM/\nAutoDroid .\n[66] Jules White, Quchen Fu, Sam Hays, Michael\nSandborn, Carlos Olea, Henry Gilbert, Ashraf\nElnashar, Jesse Spencer-Smith, and Dou-\nglas C. Schmidt. A Prompt Pattern Cat-\nalog to Enhance Prompt Engineering with\nChatGPT. (arXiv:2302.11382), February 2023.\ndoi:10.48550/arXiv.2302.11382.\n[67] Tongshuang Wu, Michael Terry, and Car-\nrie Jun Cai. AI Chains: Transparent and\n25", "mimetype": "text/plain", "start_char_idx": 2472, "end_char_idx": 3407, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "eb00f25f-0801-484f-b445-4b69362d204a": {"__data__": {"id_": "eb00f25f-0801-484f-b445-4b69362d204a", "embedding": null, "metadata": {"page_label": "26", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ec80b4a-f8f7-4d80-8458-c8c647408226", "node_type": "4", "metadata": {"page_label": "26", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2666dd7414bab5deaa647f265941239df3a9c17cf7454a6f5d0643af7cf4a59e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "13faa37f-a95c-4afa-ab65-307e9f6a82c3", "node_type": "1", "metadata": {}, "hash": "a465bba4a756c26522ddd6fcb9e32d354d5a624e47e4556a7a2afdc8d78aad52", "class_name": "RelatedNodeInfo"}}, "text": "Controllable Human-AI Interaction by Chain-\ning Large Language Model Prompts. In\nProceedings of the 2022 CHI Conference on\nHuman Factors in Computing Systems , CHI\n\u201922, pages 1\u201322, New York, NY, USA, April\n2022. Association for Computing Machinery.\ndoi:10.1145/3491102.3517582.\n[68] Congying Xia, Chen Xing, Jiangshu Du, Xinyi\nYang, Yihao Feng, Ran Xu, Wenpeng Yin,\nand Caiming Xiong. FOFO: A Benchmark\nto Evaluate LLMs\u2019 Format-Following Capa-\nbility. (arXiv:2402.18667), February 2024.\ndoi:10.48550/arXiv.2402.18667.\n[69] Yuchen Xia, Manthan Shenoy, Nasser Jazdi,\nand Michael Weyrich. Towards autonomous\nsystem: Flexible modular production sys-\ntem enhanced with large language model\nagents. In 2023 IEEE 28th International Con-\nference on Emerging Technologies and Fac-\ntory Automation (ETFA) , pages 1\u20138, 2023.\ndoi:10.1109/ETFA54631.2023.10275362.\n[70] I. de Zarz\u00e0, J. de Curt\u00f2, Gemma Roig,\nand Carlos T. Calafate. LLM Adaptive\nPID Control for B5G Truck Platooning Sys-\ntems. Sensors, 23(13):5899, January 2023.\ndoi:10.3390/s23135899.\n[71] Xiaoying Zhang, Baolin Peng, Kun Li, Jingyan\nZhou, and Helen Meng. SGP-TOD: Build-\ning Task Bots Effortlessly via Schema-Guided\nLLMPrompting. (arXiv:2305.09067), May2023.\ndoi:10.48550/arXiv.2305.09067.\n[72] Wayne Xin Zhao, Kun Zhou, Junyi Li, Tianyi\nTang, Xiaolei Wang, Yupeng Hou, Yingqian\nMin, Beichen Zhang, Junjie Zhang, Zican Dong,\nYifan Du, Chen Yang, Yushuo Chen, Zhipeng\nChen, Jinhao Jiang, Ruiyang Ren, Yifan Li,\nXinyu Tang, Zikang Liu, Peiyu Liu, Jian-Yun\nNie, and Ji-Rong Wen. A Survey of Large Lan-\nguage Models.", "mimetype": "text/plain", "start_char_idx": 0, "end_char_idx": 1567, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "13faa37f-a95c-4afa-ab65-307e9f6a82c3": {"__data__": {"id_": "13faa37f-a95c-4afa-ab65-307e9f6a82c3", "embedding": null, "metadata": {"page_label": "26", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6ec80b4a-f8f7-4d80-8458-c8c647408226", "node_type": "4", "metadata": {"page_label": "26", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2666dd7414bab5deaa647f265941239df3a9c17cf7454a6f5d0643af7cf4a59e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "eb00f25f-0801-484f-b445-4b69362d204a", "node_type": "1", "metadata": {"page_label": "26", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}, "hash": "2e0fed6bd282a66d68a04008611a434a1cb7683d6d0d8fcf2811bdfc28ded4a5", "class_name": "RelatedNodeInfo"}}, "text": "SGP-TOD: Build-\ning Task Bots Effortlessly via Schema-Guided\nLLMPrompting. (arXiv:2305.09067), May2023.\ndoi:10.48550/arXiv.2305.09067.\n[72] Wayne Xin Zhao, Kun Zhou, Junyi Li, Tianyi\nTang, Xiaolei Wang, Yupeng Hou, Yingqian\nMin, Beichen Zhang, Junjie Zhang, Zican Dong,\nYifan Du, Chen Yang, Yushuo Chen, Zhipeng\nChen, Jinhao Jiang, Ruiyang Ren, Yifan Li,\nXinyu Tang, Zikang Liu, Peiyu Liu, Jian-Yun\nNie, and Ji-Rong Wen. A Survey of Large Lan-\nguage Models. (arXiv:2303.18223), May 2023.\ndoi:10.48550/arXiv.2303.18223.\n[73] Jeffrey Zhou, Tianjian Lu, Swaroop Mishra,\nSiddhartha Brahma, Sujoy Basu, Yi Luan,Denny Zhou, and Le Hou. Instruction-\nFollowing Evaluation for Large Language Mod-\nels. (arXiv:2311.07911), November 2023.\ndoi:10.48550/arXiv.2311.07911.\n26", "mimetype": "text/plain", "start_char_idx": 1110, "end_char_idx": 1871, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/metadata": {"b2ad419e-1a65-4a86-93a2-1cbe537e4cda": {"doc_hash": "d570161a434e7162e6b5c031d02cbe7c28252550a25e76af17bf561bbc3133d0", "ref_doc_id": "c509c0fc-5645-4ec2-ad52-c59cd9ab8312"}, "3f17c50c-986f-4c55-bd39-ea3cba752d89": {"doc_hash": "449bad2230de28c8b8fdb23696e6a0265888118e46070b4233fc5e8c8fbf6664", "ref_doc_id": "6bbdd2ab-c07c-43f9-b8d1-3fdd6262449f"}, "0b3182b1-08a3-45c9-8f68-b0828413e2c1": {"doc_hash": "30f4dc935cb94f4e6833f19177f8c3305a89ee5904fdb0ad0751f1e95e28ad21", "ref_doc_id": "6bbdd2ab-c07c-43f9-b8d1-3fdd6262449f"}, "867c7dd3-1e67-4dc4-8991-0113c7e1cec7": {"doc_hash": "80b9b2481fc46f45d2d20b0c0b81c87473d3863727577396429d671ef7a4e392", "ref_doc_id": "8c5e38ca-0ab1-428c-ba7f-a3fd8501b136"}, "fe14dbe9-2c6c-46bd-93a9-bd3de6beff03": {"doc_hash": "061c6e872e016c0fc39be8ae69bdf6d454421690ddcc21042e043a0c9f1e5cd0", "ref_doc_id": "8c5e38ca-0ab1-428c-ba7f-a3fd8501b136"}, "540cb723-9160-457c-b63e-461e65a467a6": {"doc_hash": "4a28a0e753deda3bb8088d5c134bd1c7679a14deb4bd20828e72204fa59b0abf", "ref_doc_id": "bf5139e8-25ab-44f3-b473-e5091db7b64d"}, "904d3415-12ad-4d7e-9dad-1298db8fddc6": {"doc_hash": "bfc5548f4c038feab522a6e5b39a5eaa89c359061e0d57f523a52198b4774cff", "ref_doc_id": "bf5139e8-25ab-44f3-b473-e5091db7b64d"}, "de4b8d26-eced-403b-a67b-5b7ff444e716": {"doc_hash": "918b1418d500f79a4fae321c19a5522f9044e4e11f03db8a38808cdadd68764c", "ref_doc_id": "986e161e-6a76-4b2d-911b-bff900a376b3"}, "4c0c8da1-972b-429f-9fe6-909bbdd48f5d": {"doc_hash": "5059d246b7e1676a5f8cc1c880122160b49efee6397638e477b661149ba10180", "ref_doc_id": "986e161e-6a76-4b2d-911b-bff900a376b3"}, "19e62c7c-8bd5-4728-8a18-6ac6f3d0c6ea": {"doc_hash": "48710847c2318f507aa12b8656f8fd37f3877aa9c3bf68515d88705a9312ba8f", "ref_doc_id": "ffa3c4bc-7329-4985-a17c-03355b7fa5f0"}, "dbb4bd89-c760-4299-b2ac-1731b5a2d818": {"doc_hash": "79d0c3176f1551f1ce7bc2c102ccb48fd4359c04b5e53a982c6ea37c3b6672eb", "ref_doc_id": "ffa3c4bc-7329-4985-a17c-03355b7fa5f0"}, "75e5e4e6-ff5f-4165-aa63-9cb87823274b": {"doc_hash": "0368c3e1484f75545ba06490555a06aadbe406824610ec7c4068fb656d55851b", "ref_doc_id": "049ae56c-7172-4018-803f-248b20ce3b4d"}, "0d937162-5e26-4ea5-aeae-7ab937ef1ab3": {"doc_hash": "d21816a4c6f38c8fa1746cd2f4b82a6a3b0bfaac5f22b1a93981e1caac90eff0", "ref_doc_id": "049ae56c-7172-4018-803f-248b20ce3b4d"}, "2e42f13e-663c-4e08-ba8d-8d68e9efefbf": {"doc_hash": "cae34f8d9d6a008bec25ebb76e5b2c00412191b17b9e2661fda7f9eb0ef56f4b", "ref_doc_id": "fe55e9aa-9a5a-456f-a058-dacc68780a26"}, "89795346-1932-4049-ac8f-bb22dcb7bd73": {"doc_hash": "7c219311ced699f3a58d1fdfd7cfbf4c0c1539fc80d5453b2cee2b3d6a3f6e19", "ref_doc_id": "fe55e9aa-9a5a-456f-a058-dacc68780a26"}, "c59406bd-c5c6-4ae4-b778-a99fd0e0b968": {"doc_hash": "e0f35850ff7b6b814a3f04b468a587ec83cb8a763320245df0ec4c0834626dbc", "ref_doc_id": "58d6bbdd-8bfa-463c-bc53-94ff46cf55d8"}, "4ccd390b-9691-42ad-9bc2-7a0b19f7decf": {"doc_hash": "2ebea2afbe7d5d6c3ce3f91535959f7139dab848b93d44d1cc1f585c4864c5c8", "ref_doc_id": "58d6bbdd-8bfa-463c-bc53-94ff46cf55d8"}, "6d17ab9f-8d6c-4b39-bd87-c6b889ac1f63": {"doc_hash": "39935026057d93ec7407e5e3958f473bdcd05937057f758434d1fe61cbc882ef", "ref_doc_id": "bbdc7025-37ff-4a6c-ba6f-b7836b39baeb"}, "1c794646-6242-4374-a191-68a695855511": {"doc_hash": "8dc5934b70d9df839c72a0eb2e5dd6979f4cd8cf591d031db3b130943e4969a8", "ref_doc_id": "bbdc7025-37ff-4a6c-ba6f-b7836b39baeb"}, "0bc27897-ba80-4b09-b4f6-d832e0212732": {"doc_hash": "27dc5752c9bd5c52d254b62f71448673ac58b5bef65da98a01c31ab9eaee05ee", "ref_doc_id": "467a4838-cecb-49c6-99fd-d2346bf16081"}, "2cdfb2bb-a0cc-4fd3-97ed-9898da4e8818": {"doc_hash": "c1dcd00df376de9ebde39fa4ceaa7f881576ad604e4db6e744b3d72d2419b2c0", "ref_doc_id": "6b8a81b1-f19b-47e0-a793-a861dfc385f0"}, "81336c0d-695e-4b5b-92de-00cf92731353": {"doc_hash": "a2f344cd943f5c4ce0612489a40c3608bc26f5352ddf758709f30a28f4761c3d", "ref_doc_id": "6b8a81b1-f19b-47e0-a793-a861dfc385f0"}, "9d123715-4e2f-4773-8da1-dfd49ac9ce9d": {"doc_hash": "7218670218c48335cb89a824da29cbd81a2128c49329f29e55b95c62ec06c431", "ref_doc_id": "c7272ec5-df29-4ab4-8d06-2c9c7eb2b0e4"}, "17e168f0-d13f-4485-8ef8-909e6e370e8b": {"doc_hash": "412e4c2a7d9a0011138f91db2014d5c782c65d33dfd7c95885fdb6a2f4818b46", "ref_doc_id": "c7272ec5-df29-4ab4-8d06-2c9c7eb2b0e4"}, "79610271-d7c6-4c37-bcd3-f9faf4e247df": {"doc_hash": "fcae906a7175b09c62b52076e16c3999186745bf0ec973bd8683f928f0b0702a", "ref_doc_id": "fca5d7a2-bbb4-4dfd-bef0-700a3d2ba6a1"}, "ab51abcf-a3b3-4894-b593-25f2884cb85a": {"doc_hash": "0cb7551c6730890bac960385857016af7baf7d1c38b284b740c939cc19fd75cb", "ref_doc_id": "fca5d7a2-bbb4-4dfd-bef0-700a3d2ba6a1"}, "e166a46f-54c3-4ccb-8bed-dfc7751cc7cc": {"doc_hash": "245302d2dedca82f48c8ca3fe8e6659fe29a0f174a41c20f5717ec931fc14f56", "ref_doc_id": "e1771a44-1094-4ad0-88d2-a5945fcd8f3a"}, "128e4d6b-cd7f-44d4-8d27-bd28b03ce14e": {"doc_hash": "8ad8a5e627a0176b49afe9e2050ca13249efc41766feaf4d6d2fcb28b3a178cc", "ref_doc_id": "e1771a44-1094-4ad0-88d2-a5945fcd8f3a"}, "65aacc9b-8601-426d-ba08-bc434e5fb7a5": {"doc_hash": "2578941f9112a8454aa96ae5acfbab27ba658dbb6a9c4de256936e6f4297babe", "ref_doc_id": "375789b9-0c2b-4149-aee3-c5e175842371"}, "9cf76075-ec57-42f4-989f-b141ab091086": {"doc_hash": "2123d84da87c1fd3263ca4703b24ce4e2788be94481b66337fa8ad4b48b15541", "ref_doc_id": "375789b9-0c2b-4149-aee3-c5e175842371"}, "0b19723f-e380-4adf-9df5-9d9c2aab9f39": {"doc_hash": "57ccc84597612287459ad4b061999133c6d1df7431e795796824f776ea741647", "ref_doc_id": "76424085-4c00-4cbc-8945-0bc3b4b717f8"}, "23a65271-ec8c-4ddc-bc04-d8ff89f1e29f": {"doc_hash": "7fbd5905c93a6479f61de4ec2a120e8503c76aaccdf96e29bb0895abfe8ee3cc", "ref_doc_id": "76424085-4c00-4cbc-8945-0bc3b4b717f8"}, "59e74fa8-9519-40fe-99b2-faadb4fd3e5e": {"doc_hash": "88b2671bb5a3982034fbd1e3a9500010bf442e77e0c78f4e5b1740f97884966e", "ref_doc_id": "76424085-4c00-4cbc-8945-0bc3b4b717f8"}, "0d46ccd2-0ca3-4a4f-8aa5-2747f8e7fa8a": {"doc_hash": "5e6fbce1ce9b582156098fdd19c65616cf2744c3b2f322f8e6bd4e86d8a0b268", "ref_doc_id": "77b25a03-dc3a-4abf-9b61-b485ac5e4813"}, "78a41651-ec9f-4053-adc1-b592e00c44d5": {"doc_hash": "d7831312f7926405c864f25d15119eaaf400b1d9e390fdf9df7b1fd7091c0dc8", "ref_doc_id": "77b25a03-dc3a-4abf-9b61-b485ac5e4813"}, "0b814134-8d74-442b-bfe7-3c18cbf6dcd6": {"doc_hash": "fac9a9574827e8b56aec6d92e33644700e07d9695ac9c6a3afab9ee6c816d9af", "ref_doc_id": "c6084061-aef8-4513-9e64-fe1ab596cefd"}, "073b12e4-6759-4fd5-83e5-a616501394c8": {"doc_hash": "016791ed4c2d84fa355fb6fde74729cecd92ae9ec29f561129bd275caebc656c", "ref_doc_id": "c6084061-aef8-4513-9e64-fe1ab596cefd"}, "841ebeb0-873f-4255-8d18-d8ee69df8b7b": {"doc_hash": "6d888336d2529213a2faa0f983cd94c767750cea823f7e1374915db470c031a2", "ref_doc_id": "9e4a8664-5d52-4c8c-be41-ca06b5c8f113"}, "0f2b3dcf-cadc-418f-b1c9-5e75dedf7cf2": {"doc_hash": "3ab316d0da775340006be89209efb1082d9531fcd8b109eb537a649e44241ac0", "ref_doc_id": "9e4a8664-5d52-4c8c-be41-ca06b5c8f113"}, "7e13e149-97fd-4d8c-8844-ef320cdee892": {"doc_hash": "0c52797aefa0351686209eb4ddce06f41146cd36030933c687eec9e2d92ec780", "ref_doc_id": "cb884f34-2abe-4bf1-8b02-291b33ff8e89"}, "85df8eda-1ebd-407f-8157-fc9e728bbb58": {"doc_hash": "804db53bfde79cd5fe797edfe906291388f00f4862e13f6b2e3343c1ddcdc08f", "ref_doc_id": "cb884f34-2abe-4bf1-8b02-291b33ff8e89"}, "41f26057-4d33-4078-8bd7-6f35caf256ca": {"doc_hash": "0e452a1051bf3205fc7b32ee4285893d55cca0d7fd1fdd1407f2c26234bdd9fa", "ref_doc_id": "cb884f34-2abe-4bf1-8b02-291b33ff8e89"}, "b0089072-8336-4b13-875e-6f69a0a1fab9": {"doc_hash": "3e89894b6fe7f3d05645278e83ccb1980109f34694da328478398055397ee6a9", "ref_doc_id": "94fc6d4f-2b9e-40d6-93e0-f25e594122cf"}, "cff581c7-9268-4f33-8f3c-0afd09f23775": {"doc_hash": "d4f57ee3bcdd16d3274c3041d4174e9afcb7ad9237eaa09000e2d7b50600f104", "ref_doc_id": "94fc6d4f-2b9e-40d6-93e0-f25e594122cf"}, "0d9e4174-77b8-49bb-b2ca-c5746775aff2": {"doc_hash": "6cd2c72ac2aa6a095d7cda26494ad4286af2f7ccbb86e1dfda59c3767bc7d29e", "ref_doc_id": "94fc6d4f-2b9e-40d6-93e0-f25e594122cf"}, "4ae6767c-4379-46fb-ab1b-af51ff869db4": {"doc_hash": "9c2676753d1589c2fdca4b22ee741785eea856fdd4dae5e247ce80fa0e7af762", "ref_doc_id": "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6"}, "ebe3fa39-7c40-44d9-a3fd-1bde7b5930b7": {"doc_hash": "3f7de6d1f7ba6a48ffc69e655901a39aefd38549779b6990e51271f09a757834", "ref_doc_id": "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6"}, "384fda3c-30da-4539-b942-215697f354a9": {"doc_hash": "47f8417082c5e85c21d4c420dfb7d7158d689daa99480c2fed1ad17f38ef7edc", "ref_doc_id": "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6"}, "c51d0c33-fd71-4610-b4fa-6bb340a85747": {"doc_hash": "f2697e839d9782ea135dc5a4e99cf0349f8c5acfada2b5baabf8aacef803de56", "ref_doc_id": "b5702f49-0fbd-476c-99b1-bf733a55c02c"}, "90569f67-c917-44e8-9d5e-d9b97f8e2467": {"doc_hash": "621198779b41a40f722469613ed601f7cfe1836d1c0e19795f1ab589d3fb3e22", "ref_doc_id": "b5702f49-0fbd-476c-99b1-bf733a55c02c"}, "76df0ad1-304c-4bac-ad21-ba9b229c4260": {"doc_hash": "aa743fcbfd9ce6af7343ff73b3f41a06791a1487c348d4c08e450456b5b18818", "ref_doc_id": "b5702f49-0fbd-476c-99b1-bf733a55c02c"}, "538ba1d5-3ad5-4a06-b93b-cdac66f52eea": {"doc_hash": "1709cc35d389a2bcac90ff12d3b6c726cbfd92b7f95b5183db85abc7cac35035", "ref_doc_id": "22fc0375-79af-406d-a705-553934e3ff72"}, "f04ff467-9789-4f80-a01d-9c6a83684748": {"doc_hash": "01fc621f985e80e8471bd746ca34bd68408238c37366246b1f88ba368ae37f35", "ref_doc_id": "22fc0375-79af-406d-a705-553934e3ff72"}, "5802214d-8956-4c2d-8a7f-b573b3a9eb29": {"doc_hash": "ffd0656a447808eca2a673401d440b9571f9fa60156027533c18c7b7da2638e8", "ref_doc_id": "22fc0375-79af-406d-a705-553934e3ff72"}, "eb00f25f-0801-484f-b445-4b69362d204a": {"doc_hash": "2e0fed6bd282a66d68a04008611a434a1cb7683d6d0d8fcf2811bdfc28ded4a5", "ref_doc_id": "6ec80b4a-f8f7-4d80-8458-c8c647408226"}, "13faa37f-a95c-4afa-ab65-307e9f6a82c3": {"doc_hash": "414584c07dff0caa07ebf6c2aa3d72c9802be59ed776e2d391316f985eb80299", "ref_doc_id": "6ec80b4a-f8f7-4d80-8458-c8c647408226"}}, "docstore/ref_doc_info": {"c509c0fc-5645-4ec2-ad52-c59cd9ab8312": {"node_ids": ["b2ad419e-1a65-4a86-93a2-1cbe537e4cda"], "metadata": {"page_label": "1", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "6bbdd2ab-c07c-43f9-b8d1-3fdd6262449f": {"node_ids": ["3f17c50c-986f-4c55-bd39-ea3cba752d89", "0b3182b1-08a3-45c9-8f68-b0828413e2c1"], "metadata": {"page_label": "2", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "8c5e38ca-0ab1-428c-ba7f-a3fd8501b136": {"node_ids": ["867c7dd3-1e67-4dc4-8991-0113c7e1cec7", "fe14dbe9-2c6c-46bd-93a9-bd3de6beff03"], "metadata": {"page_label": "3", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "bf5139e8-25ab-44f3-b473-e5091db7b64d": {"node_ids": ["540cb723-9160-457c-b63e-461e65a467a6", "904d3415-12ad-4d7e-9dad-1298db8fddc6"], "metadata": {"page_label": "4", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "986e161e-6a76-4b2d-911b-bff900a376b3": {"node_ids": ["de4b8d26-eced-403b-a67b-5b7ff444e716", "4c0c8da1-972b-429f-9fe6-909bbdd48f5d"], "metadata": {"page_label": "5", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "ffa3c4bc-7329-4985-a17c-03355b7fa5f0": {"node_ids": ["19e62c7c-8bd5-4728-8a18-6ac6f3d0c6ea", "dbb4bd89-c760-4299-b2ac-1731b5a2d818"], "metadata": {"page_label": "6", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "049ae56c-7172-4018-803f-248b20ce3b4d": {"node_ids": ["75e5e4e6-ff5f-4165-aa63-9cb87823274b", "0d937162-5e26-4ea5-aeae-7ab937ef1ab3"], "metadata": {"page_label": "7", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "fe55e9aa-9a5a-456f-a058-dacc68780a26": {"node_ids": ["2e42f13e-663c-4e08-ba8d-8d68e9efefbf", "89795346-1932-4049-ac8f-bb22dcb7bd73"], "metadata": {"page_label": "8", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "58d6bbdd-8bfa-463c-bc53-94ff46cf55d8": {"node_ids": ["c59406bd-c5c6-4ae4-b778-a99fd0e0b968", "4ccd390b-9691-42ad-9bc2-7a0b19f7decf"], "metadata": {"page_label": "9", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "bbdc7025-37ff-4a6c-ba6f-b7836b39baeb": {"node_ids": ["6d17ab9f-8d6c-4b39-bd87-c6b889ac1f63", "1c794646-6242-4374-a191-68a695855511"], "metadata": {"page_label": "10", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "467a4838-cecb-49c6-99fd-d2346bf16081": {"node_ids": ["0bc27897-ba80-4b09-b4f6-d832e0212732"], "metadata": {"page_label": "11", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "6b8a81b1-f19b-47e0-a793-a861dfc385f0": {"node_ids": ["2cdfb2bb-a0cc-4fd3-97ed-9898da4e8818", "81336c0d-695e-4b5b-92de-00cf92731353"], "metadata": {"page_label": "12", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "c7272ec5-df29-4ab4-8d06-2c9c7eb2b0e4": {"node_ids": ["9d123715-4e2f-4773-8da1-dfd49ac9ce9d", "17e168f0-d13f-4485-8ef8-909e6e370e8b"], "metadata": {"page_label": "13", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "fca5d7a2-bbb4-4dfd-bef0-700a3d2ba6a1": {"node_ids": ["79610271-d7c6-4c37-bcd3-f9faf4e247df", "ab51abcf-a3b3-4894-b593-25f2884cb85a"], "metadata": {"page_label": "14", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "e1771a44-1094-4ad0-88d2-a5945fcd8f3a": {"node_ids": ["e166a46f-54c3-4ccb-8bed-dfc7751cc7cc", "128e4d6b-cd7f-44d4-8d27-bd28b03ce14e"], "metadata": {"page_label": "15", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "375789b9-0c2b-4149-aee3-c5e175842371": {"node_ids": ["65aacc9b-8601-426d-ba08-bc434e5fb7a5", "9cf76075-ec57-42f4-989f-b141ab091086"], "metadata": {"page_label": "16", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "76424085-4c00-4cbc-8945-0bc3b4b717f8": {"node_ids": ["0b19723f-e380-4adf-9df5-9d9c2aab9f39", "23a65271-ec8c-4ddc-bc04-d8ff89f1e29f", "59e74fa8-9519-40fe-99b2-faadb4fd3e5e"], "metadata": {"page_label": "17", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "77b25a03-dc3a-4abf-9b61-b485ac5e4813": {"node_ids": ["0d46ccd2-0ca3-4a4f-8aa5-2747f8e7fa8a", "78a41651-ec9f-4053-adc1-b592e00c44d5"], "metadata": {"page_label": "18", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "c6084061-aef8-4513-9e64-fe1ab596cefd": {"node_ids": ["0b814134-8d74-442b-bfe7-3c18cbf6dcd6", "073b12e4-6759-4fd5-83e5-a616501394c8"], "metadata": {"page_label": "19", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "9e4a8664-5d52-4c8c-be41-ca06b5c8f113": {"node_ids": ["841ebeb0-873f-4255-8d18-d8ee69df8b7b", "0f2b3dcf-cadc-418f-b1c9-5e75dedf7cf2"], "metadata": {"page_label": "20", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "cb884f34-2abe-4bf1-8b02-291b33ff8e89": {"node_ids": ["7e13e149-97fd-4d8c-8844-ef320cdee892", "85df8eda-1ebd-407f-8157-fc9e728bbb58", "41f26057-4d33-4078-8bd7-6f35caf256ca"], "metadata": {"page_label": "21", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "94fc6d4f-2b9e-40d6-93e0-f25e594122cf": {"node_ids": ["b0089072-8336-4b13-875e-6f69a0a1fab9", "cff581c7-9268-4f33-8f3c-0afd09f23775", "0d9e4174-77b8-49bb-b2ca-c5746775aff2"], "metadata": {"page_label": "22", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "dd30b9bb-a9e5-4dc3-8b65-0683fb4244b6": {"node_ids": ["4ae6767c-4379-46fb-ab1b-af51ff869db4", "ebe3fa39-7c40-44d9-a3fd-1bde7b5930b7", "384fda3c-30da-4539-b942-215697f354a9"], "metadata": {"page_label": "23", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "b5702f49-0fbd-476c-99b1-bf733a55c02c": {"node_ids": ["c51d0c33-fd71-4610-b4fa-6bb340a85747", "90569f67-c917-44e8-9d5e-d9b97f8e2467", "76df0ad1-304c-4bac-ad21-ba9b229c4260"], "metadata": {"page_label": "24", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "22fc0375-79af-406d-a705-553934e3ff72": {"node_ids": ["538ba1d5-3ad5-4a06-b93b-cdac66f52eea", "f04ff467-9789-4f80-a01d-9c6a83684748", "5802214d-8956-4c2d-8a7f-b573b3a9eb29"], "metadata": {"page_label": "25", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}, "6ec80b4a-f8f7-4d80-8458-c8c647408226": {"node_ids": ["eb00f25f-0801-484f-b445-4b69362d204a", "13faa37f-a95c-4afa-ab65-307e9f6a82c3"], "metadata": {"page_label": "26", "file_name": "2406_10300v1.pdf", "Title of this paper": "Large Language Models as Software Components: A Taxonomy for LLM-Integrated Applications", "Authors": "Irene Weber", "Date published": "06/13/2024", "URL": "http://arxiv.org/abs/2406.10300v1", "summary": "Large Language Models (LLMs) have become widely adopted recently. Research\nexplores their use both as autonomous agents and as tools for software\nengineering. LLM-integrated applications, on the other hand, are software\nsystems that leverage an LLM to perform tasks that would otherwise be\nimpossible or require significant coding effort. While LLM-integrated\napplication engineering is emerging as new discipline, its terminology,\nconcepts and methods need to be established. This study provides a taxonomy for\nLLM-integrated applications, offering a framework for analyzing and describing\nthese systems. It also demonstrates various ways to utilize LLMs in\napplications, as well as options for implementing such integrations.\n  Following established methods, we analyze a sample of recent LLM-integrated\napplications to identify relevant dimensions. We evaluate the taxonomy by\napplying it to additional cases. This review shows that applications integrate\nLLMs in numerous ways for various purposes. Frequently, they comprise multiple\nLLM integrations, which we term ``LLM components''. To gain a clear\nunderstanding of an application's architecture, we examine each LLM component\nseparately. We identify thirteen dimensions along which to characterize an LLM\ncomponent, including the LLM skills leveraged, the format of the output, and\nmore. LLM-integrated applications are described as combinations of their LLM\ncomponents. We suggest a concise representation using feature vectors for\nvisualization.\n  The taxonomy is effective for describing LLM-integrated applications. It can\ncontribute to theory building in the nascent field of LLM-integrated\napplication engineering and aid in developing such systems. Researchers and\npractitioners explore numerous creative ways to leverage LLMs in applications.\nThough challenges persist, integrating LLMs may revolutionize the way software\nsystems are built."}}}}